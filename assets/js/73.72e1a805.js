(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{395:function(t,n,o){"use strict";o.r(n);var l=o(7),s=Object(l.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("ol",[n("li",[n("strong",[t._v("二叉搜索树（BST）")]),t._v("：二叉搜索树是一种常用的树形数据结构，具有良好的搜索效率。它的每个节点都具有一个键值，且节点的左子树键值小于该节点的键值，节点的右子树键值大于该节点的键值。在二叉搜索树中查找某个元素时，每次都可以排除一半的元素，因此搜索效率为对数级别。")]),t._v(" "),n("li",[n("strong",[t._v("平衡二叉搜索树（AVL树）")]),t._v("：平衡二叉搜索树也是一种二叉搜索树，它能够自动平衡节点的高度，以保证查询的效率。AVL树中任何节点的左右子树高度最多相差1，因此在AVL树中查找元素的时间复杂度为O(log n)。")]),t._v(" "),n("li",[n("strong",[t._v("红黑树")]),t._v("：红黑树也是一种自平衡的二叉搜索树，具有良好的搜索效率。红黑树的每个节点都有一个颜色（红色或黑色），并且满足以下几个条件：（1）根节点是黑色的；（2）每个叶子节点都是黑色的空节点；（3）每个红色节点的两个子节点都是黑色的；（4）从任意节点到其每个叶子节点的所有路径都包含相同数目的黑色节点。在红黑树中查找元素的时间复杂度为O(log n)。")]),t._v(" "),n("li",[n("strong",[t._v("B树")]),t._v("：B树是一种多路搜索树，每个节点可以有多个子节点。B树的每个节点都包含多个关键字，并且按照大小排序。在B树中查找元素的时间复杂度也为O(log n)。B树被广泛应用于文件系统、数据库系统等领域。")]),t._v(" "),n("li",[n("strong",[t._v("B+树")]),t._v("：B+ 树在B树的基础上，为叶子节点增加了链表指针，所有数据都存储在叶子节点。非叶子节点作为叶子节点的索引。")])])])}),[],!1,null,null,null);n.default=s.exports}}]);