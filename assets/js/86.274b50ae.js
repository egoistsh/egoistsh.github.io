(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{410:function(r,t,o){"use strict";o.r(t);var a=o(7),s=Object(a.a)({},(function(){var r=this,t=r._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[t("p",[r._v("好多文章是写得真差。差那么点意思。")]),r._v(" "),t("h2",{attrs:{id:"什么是-spring-boot-自动装配"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-spring-boot-自动装配"}},[r._v("#")]),r._v(" 什么是 spring boot 自动装配？")]),r._v(" "),t("p",[r._v("实际上 Spring Framework 早就实现了这个功能。Spring Boot 只是在其基础上，通过 SPI 的方式，做了进一步优化。")]),r._v(" "),t("p",[r._v("SpringBoot 定义了一套接口规范，这套规范规定：SpringBoot 在启动时会扫描外部引用 jar 包中的"),t("code",[r._v("META-INF/spring.factories")]),r._v("文件，将文件中配置的类型信息加载到 Spring 容器，并执行类中定义的各种操作。对于外部 jar 来说，只需要按照 SpringBoot 定义的标准，就能将自己的功能装置进 SpringBoot。")]),r._v(" "),t("h2",{attrs:{id:"spring-boot-自动装配的原理是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-自动装配的原理是什么"}},[r._v("#")]),r._v(" spring boot 自动装配的原理是什么？")]),r._v(" "),t("p",[r._v("Spring Boot 自动配置主要是 @EnableAutoConfiguration 实现的，@EnableAutoConfiguration 注解导入 AutoConfigurationImportSelector类,通过 selectImports 方法调用 SpringFactoriesLoader.loadFactoryNames() 扫描所有含有 META-INF/spring.factories 文件的 jar 包，将 spring.factories 文件中 @EnableAutoConfiguration 对应的类注入到 IOC 容器中。")]),r._v(" "),t("p",[r._v("这些属性自动配置到 IOC 之后就无需自己手动配置 bean 了，Spring boot 中的约定大于配置理念，约定是将需要的配置以约定的方式添加到 IOC 容器中。")]),r._v(" "),t("h2",{attrs:{id:"spring-factories和spring-autoconfigure-metadata-properties区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-factories和spring-autoconfigure-metadata-properties区别"}},[r._v("#")]),r._v(" spring.factories和spring-autoconfigure-metadata.properties区别")]),r._v(" "),t("p",[r._v("https://zhuanlan.zhihu.com/p/594950918")]),r._v(" "),t("h2",{attrs:{id:"spring-3-0-弃用-spring-factories"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-3-0-弃用-spring-factories"}},[r._v("#")]),r._v(" spring 3.0，弃用 spring.factories ！")]),r._v(" "),t("p",[r._v("Spring Boot 2.7中，有一个不推荐使用的内容就是关于"),t("code",[r._v("/META-INF/spring.factories")]),r._v("文件，所以对于有自定义Starter的开发者来说，有时间要抓紧把这一变化改起来了，因为在Spring Boot 3开始将移除对"),t("code",[r._v("/META-INF/spring.factories")]),r._v("的支持。")]),r._v(" "),t("p",[r._v("具体变化：swagger的starter为例，它的``内容是这样的：")]),r._v(" "),t("p",[r._v("before："),t("code",[r._v("/META-INF/spring.factories")])]),r._v(" "),t("div",{staticClass:"language-xml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[r._v("org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\n  com.spring4all.swagger.SwaggerAutoConfiguration\n")])])]),t("p",[r._v("after："),t("code",[r._v("/META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports")]),r._v("，只需要创建一个新的文件，内容的话只需要直接放配置类")]),r._v(" "),t("div",{staticClass:"language-xml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[r._v("com.spring4all.swagger.SwaggerAutoConfiguration\n")])])]),t("p",[r._v("https://blog.didispace.com/spring-factories-deprecations/")]),r._v(" "),t("h2",{attrs:{id:"参考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[r._v("#")]),r._v(" 参考")]),r._v(" "),t("ul",[t("li",[t("p",[r._v("https://www.cnblogs.com/javaguide/p/springboot-auto-config.html")])]),r._v(" "),t("li",[t("p",[r._v("https://juejin.cn/post/7162568709955911717#heading-8")])]),r._v(" "),t("li",[t("p",[r._v("https://zhuanlan.zhihu.com/p/594950918")])]),r._v(" "),t("li",[t("p",[r._v("https://blog.didispace.com/spring-factories-deprecations/")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);