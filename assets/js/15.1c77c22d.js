(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{339:function(v,_,a){"use strict";a.r(_);var l=a(7),r=Object(l.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"垃圾回收算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收算法"}},[v._v("#")]),v._v(" 垃圾回收算法")]),v._v(" "),_("ul",[_("li",[v._v("标记-清理 Mark-Sweep")]),v._v(" "),_("li",[v._v("标记-复制：常用于新生代")]),v._v(" "),_("li",[v._v("标记-整理 Mark-Compact")])]),v._v(" "),_("h2",{attrs:{id:"垃圾回收器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收器"}},[v._v("#")]),v._v(" 垃圾回收器")]),v._v(" "),_("p",[v._v("垃圾回收器分类：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("新生代")])]),v._v(" "),_("li",[_("ul",[_("li",[v._v("Serial：单线程")]),v._v(" "),_("li",[v._v("ParNew （只能跟CMS搭配）：多线程并行")]),v._v(" "),_("li",[v._v("Parallel Scavenge")])])]),v._v(" "),_("li",[_("p",[v._v("老年代")])]),v._v(" "),_("li",[_("ul",[_("li",[v._v("Serial Old")]),v._v(" "),_("li",[v._v("Parallel Old")]),v._v(" "),_("li",[v._v("CMS")])])]),v._v(" "),_("li",[_("p",[v._v("通用")])]),v._v(" "),_("li",[_("ul",[_("li",[v._v("G1")])])]),v._v(" "),_("li",[_("p",[v._v("低延迟")])]),v._v(" "),_("li",[_("ul",[_("li",[v._v("ZGC")]),v._v(" "),_("li",[v._v("Shenandoah")])])])]),v._v(" "),_("p",[v._v("搭配：")]),v._v(" "),_("ul",[_("li",[v._v("Serial + Serial Old")]),v._v(" "),_("li",[v._v("Parallel Scavenge + Parallel Old")]),v._v(" "),_("li",[v._v("Parallel Scavenge + Serial Old")]),v._v(" "),_("li",[v._v("ParNew + CMS （ParNew和CMS唯一使用情况）")]),v._v(" "),_("li",[v._v("G1")]),v._v(" "),_("li",[v._v("ZGC")]),v._v(" "),_("li",[v._v("Shenandoah")]),v._v(" "),_("li",[_("s",[v._v("Serial+ CMS （JDK 9移除）")])]),v._v(" "),_("li",[_("s",[v._v("ParNew + Serial Old（JDK 9移除）")])])]),v._v(" "),_("h2",{attrs:{id:"对比"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#对比"}},[v._v("#")]),v._v(" 对比")]),v._v(" "),_("ul",[_("li",[v._v("Serial 是单线程版本，ParNew是Serial的多线程版本。")]),v._v(" "),_("li",[v._v("Parallel Scavenge 关注的是吞吐量（CPU用于运行用户代码的时间与总时间的比值），CMS关注的是线程的停顿时间（提高用户体验）。")]),v._v(" "),_("li",[v._v("G1关注低停顿+高吞吐。G1 从整体来看是基于“标记-整理”算法实现的收集器；从局部上来看是基于“标记-复制”算法实现的。")]),v._v(" "),_("li",[v._v("G1 收集器在后台维护了一个优先列表，每次根据允许的收集时间，优先选择回收价值最大的 "),_("strong",[v._v("Region")]),v._v("(这也就是它的名字 Garbage-First 的由来) 。")]),v._v(" "),_("li",[v._v("ZGC：基于Region 内存布局，不设分代，使用了读屏障、染色指针和内存多重映射等技术实现可并发的标记-整理算法，以低延迟为首要目标。")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://p.ipic.vip/v2zo1k.png",alt:"img"}})]),v._v(" "),_("h2",{attrs:{id:"cms-concurrent-mark-sweep"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cms-concurrent-mark-sweep"}},[v._v("#")]),v._v(" CMS（Concurrent Mark Sweep）")]),v._v(" "),_("p",[v._v("执行步骤：")]),v._v(" "),_("ol",[_("li",[v._v("初始标记：仅仅只是标记一下 GC Roots 能直接关联到的对象，速度很快，需要停顿。会导致swt。")]),v._v(" "),_("li",[v._v("并发标记：与用户线程同时运行，进行 GC Roots Tracing 的过程，它在整个回收过程中耗时最长，不需要停顿。")]),v._v(" "),_("li",[v._v("重新标记，会导致swt。为了修正并发标记期间因用户程序继续运作而导致标记变动的那一部分对象的标记记录，需要停顿。")]),v._v(" "),_("li",[v._v("并发清理，不需要停顿。")]),v._v(" "),_("li",[v._v("并发重置线程，等待下次CMS的触发")])]),v._v(" "),_("p",[v._v("缺点：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("吞吐量低: 低停顿时间是以牺牲吞吐量为代价的，导致 CPU 利用率不够高。")])]),v._v(" "),_("li",[_("p",[v._v("对 CPU 资源敏感；")])]),v._v(" "),_("li",[_("p",[v._v("无法处理浮动垃圾。浮动垃圾是指并发清除阶段由于用户线程继续运行而产生的垃圾，这部分垃圾只能到下一次 GC 时才能进行回收。由于浮动垃圾的存在，因此需要预留出一部分内存，意味着 CMS 收集不能像其它收集器那样等待老年代快满的时候再回收。如果预留的内存不够存放浮动垃圾，就会出现 Concurrent Mode Failure，这时虚拟机将临时启用 Serial Old 来替代 CMS。")])]),v._v(" "),_("li",[_("p",[v._v("它使用的回收算法-“标记-清除”算法会导致收集结束时会有大量空间碎片产生。")])])]),v._v(" "),_("h2",{attrs:{id:"g1"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#g1"}},[v._v("#")]),v._v(" G1")]),v._v(" "),_("p",[v._v("引入Region分区的概念，弱化分代的概念。")]),v._v(" "),_("p",[v._v("G1 把堆划分成多个大小相等的独立区域(Region)，新生代和老年代不再物理隔离。")]),v._v(" "),_("p",[v._v("使得每个小空间可以单独进行垃圾回收。这种划分方法带来了很大的灵活性，使得可预测的停顿时间模型成为可能。通过记录每个 Region 垃圾回收时间以及回收所获得的空间(这两个值是通过过去回收的经验获得)，并维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的 Region。")]),v._v(" "),_("p",[v._v("每个 Region 都有一个 Remembered Set，用来记录该 Region 对象的引用对象所在的 Region。通过使用 Remembered Set，在做可达性分析的时候就可以避免全堆扫描。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://p.ipic.vip/81gct9.png",alt:"image"}})]),v._v(" "),_("p",[v._v("执行步骤：")]),v._v(" "),_("ol",[_("li",[v._v("初始标记")]),v._v(" "),_("li",[v._v("并发标记")]),v._v(" "),_("li",[v._v("最终标记（标记那些在并发标记阶段发生变化的对象，将被回收）")]),v._v(" "),_("li",[v._v("筛选回收（首先对各个Regin的回收价值和成本进行排序，根据用户所期待的GC停顿时间指定回收计划，回收一部分Region）")])]),v._v(" "),_("br"),v._v(" "),_("p",[v._v("特点：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("空间整合: 整体来看是基于“标记 - 整理”算法实现的收集器，从局部(两个 Region 之间)上来看是基于“复制”算法实现的，这意味着运行期间不会产生内存空间碎片。")])]),v._v(" "),_("li",[_("p",[v._v("可预测的停顿: 能让使用者明确指定在一个长度为 M 毫秒的时间片段内，消耗在 GC 上的时间不得超过 N 毫秒。")])])]),v._v(" "),_("br"),v._v(" "),_("p",[v._v("G1的一些总结：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("G1是一款非常优秀的垃圾收集器，不仅适合堆内存大的应用，同时也简化了调优的工作。通过主要的参数初始和最大堆空间、以及最大容忍的GC暂停目标，就能得到不错的性能。")])]),v._v(" "),_("li",[_("p",[v._v("虽然G1也有类似CMS的收集动作：初始标记、并发标记、重新标记、清除、转移回收，并且也以一个串行收集器做担保机制。")])]),v._v(" "),_("li",[_("p",[v._v('G1的设计原则是"'),_("strong",[v._v("首先收集尽可能多的垃圾")]),v._v('(Garbage First)"。因此，G1并不会等内存耗尽(串行、并行)或者快耗尽(CMS)的时候开始垃圾收集，而是在内部采用了启发式算法，在老年代找出具有高收集收益的分区进行收集。同时G1可以根据用户设置的暂停时间目标自动调整年轻代和总堆大小，暂停目标越短年轻代空间越小、总空间就越大；')])]),v._v(" "),_("li",[_("p",[v._v("G1采用内存分区(Region)的思路，将内存划分为一个个相等大小的内存分区，回收时则以分区为单位进行回收，存活的对象复制到另一个空闲分区中。由于都是以相等大小的分区为单位进行操作，因此G1天然就是一种压缩方案(局部压缩)；")])]),v._v(" "),_("li",[_("p",[v._v("G1虽然也是分代收集器，但整个内存分区不存在物理上的年轻代与老年代的区别，也不需要完全独立的survivor(to space)堆做复制准备。G1只有逻辑上的分代概念，或者说每个分区都可能随G1的运行在不同代之间前后切换；")])]),v._v(" "),_("li",[_("p",[v._v("G1的收集都是STW的，但年轻代和老年代的收集界限比较模糊，采用了混合(mixed)收集的方式。即每次收集既可能只收集年轻代分区(年轻代收集)，也可能在收集年轻代的同时，包含部分老年代分区(混合收集)，这样即使堆内存很大时，也可以限制收集范围，从而降低停顿。")])])]),v._v(" "),_("br"),v._v(" "),_("p",[v._v("Shenandoah与G1的3个明显不同：")]),v._v(" "),_("ul",[_("li",[v._v("支持并发的整理算法（最重要）。G1的回收阶段是可以多线程并行的，但不能与用户线程并发。")]),v._v(" "),_("li",[v._v("目前默认不使用分代回收")]),v._v(" "),_("li",[v._v("摒弃G1中耗费大量内存和计算资源去维护的记忆集，使用“连接矩阵”的全局数据结构来记录跨Region的引用关系。")])]),v._v(" "),_("h2",{attrs:{id:"zgc"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#zgc"}},[v._v("#")]),v._v(" ZGC")]),v._v(" "),_("p",[v._v("ZGC（The Z Garbage Collector）是JDK 11中推出的一款"),_("strong",[v._v("低延迟")]),v._v("垃圾回收器，它的设计目标包括：")]),v._v(" "),_("ul",[_("li",[v._v("停顿时间不超过10ms；")]),v._v(" "),_("li",[v._v("停顿时间不会随着堆的大小，或者活跃对象的大小而增加（对程序吞吐量影响小于15%）；")]),v._v(" "),_("li",[v._v("支持8MB~4TB级别的堆（未来支持16TB）。")])]),v._v(" "),_("p",[v._v("标记复制算法的三个阶段：")]),v._v(" "),_("p",[_("strong",[v._v("标记阶段")]),v._v("，即从GC Roots集合开始，标记活跃对象；")]),v._v(" "),_("p",[_("strong",[v._v("转移阶段")]),v._v("，即把活跃对象复制到新的内存地址上；")]),v._v(" "),_("p",[_("strong",[v._v("重定位阶段")]),v._v("，因为转移导致对象的地址发生了变化，在重定位阶段，所有指向对象旧地址的指针都要调整到对象新的地址上。")]),v._v(" "),_("p",[v._v("问题分析：停顿时间的主要瓶颈是是标记-复制中转移阶段的STW。标记-复制算法应用在CMS新生代（ParNew是CMS默认的新生代垃圾回收器）和G1垃圾回收器中。")]),v._v(" "),_("p",[v._v("与CMS中的ParNew和G1类似，"),_("strong",[v._v("ZGC也采用标记-复制算法")]),v._v("，不过ZGC对该算法做了重大改进："),_("strong",[v._v("ZGC在标记、转移和重定位阶段几乎都是并发")]),v._v("的，这是ZGC实现停顿时间小于10ms目标的最关键原因。")]),v._v(" "),_("p",[v._v("ZGC只有三个STW阶段：初始标记，再标记，初始转移。其中，初始标记和初始转移分别都只需要扫描所有GC Roots，其处理时间和GC Roots的数量成正比，一般情况耗时非常短；再标记阶段STW时间很短，最多1ms，超过1ms则再次进入并发标记阶段。即，ZGC几乎所有暂停都只依赖于GC Roots集合大小，停顿时间不会随着堆的大小或者活跃对象的大小而增加。与ZGC对比，G1的转移阶段完全STW的，且停顿时间随存活对象的大小增加而增加。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://p.ipic.vip/yau0nt.png",alt:"img"}})]),v._v(" "),_("p",[v._v("ZGC通过着色指针和读屏障技术，解决了转移过程中准确访问对象的问题，实现了并发转移。大致原理描述如下：并发转移中“并发”意味着GC线程在转移对象的过程中，应用线程也在不停地访问对象。假设对象发生转移，但对象地址未及时更新，那么应用线程可能访问到旧地址，从而造成错误。而在ZGC中，应用线程访问对象将触发“读屏障”，如果发现对象被移动了，那么“读屏障”会把读出来的指针更新到对象的新地址上，这样应用线程始终访问的都是对象的新地址。那么，JVM是如何判断对象被移动过呢？就是利用对象引用的地址，即着色指针。下面介绍着色指针和读屏障技术细节。")]),v._v(" "),_("h3",{attrs:{id:"着色指针"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#着色指针"}},[v._v("#")]),v._v(" 着色指针")]),v._v(" "),_("p",[v._v("着色指针是一种将信息存储在指针中的技术。")]),v._v(" "),_("p",[v._v("ZGC将对象存活信息存储在42~45位中，这与传统的垃圾回收并将对象存活信息放在对象头中完全不同。")]),v._v(" "),_("h3",{attrs:{id:"读屏障"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#读屏障"}},[v._v("#")]),v._v(" 读屏障")]),v._v(" "),_("p",[v._v("读屏障是JVM向应用代码插入一小段代码的技术。当应用线程从堆中读取对象引用时，就会执行这段代码。需要注意的是，仅“从堆中读取对象引用”才会触发这段代码。")]),v._v(" "),_("p",[v._v("ZGC中读屏障的代码作用：在对象标记和转移过程中，用于确定对象的引用地址是否满足条件，并作出相应动作。")]),v._v(" "),_("br"),v._v(" "),_("p",[v._v("参考：")]),v._v(" "),_("ul",[_("li",[v._v("https://www.pdai.tech/md/java/jvm/java-jvm-gc-zgc.html")])]),v._v(" "),_("h2",{attrs:{id:"空间分配担保"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#空间分配担保"}},[v._v("#")]),v._v(" 空间分配担保")]),v._v(" "),_("p",[v._v("在发生 Minor GC 之前，虚拟机先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果条件成立的话，那么 Minor GC 可以确认是安全的。")]),v._v(" "),_("p",[v._v("如果不成立的话虚拟机会查看 HandlePromotionFailure 设置值是否允许担保失败，如果允许那么就会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试着进行一次 Minor GC；如果小于，或者 HandlePromotionFailure 设置不允许冒险，那么就要进行一次 Full GC。")]),v._v(" "),_("h2",{attrs:{id:"gc-的触发条件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#gc-的触发条件"}},[v._v("#")]),v._v(" GC 的触发条件")]),v._v(" "),_("p",[v._v("Minor GC：当 eden 满时，触发一次 minor GC。")]),v._v(" "),_("p",[v._v("Full GC：")]),v._v(" "),_("ul",[_("li",[v._v("调用 "),_("code",[v._v("System.gc();")]),v._v(" 只是建议虚拟机执行 Full GC，但是虚拟机不一定真正去执行。不建议使用这种方式，而是让虚拟机管理内存。")]),v._v(" "),_("li",[v._v("老年代空间不足")]),v._v(" "),_("li",[v._v("空间分配担保失败")]),v._v(" "),_("li",[v._v("JDK1.7 及之前，永久代空间不足。")]),v._v(" "),_("li",[v._v("Concurrent Mode Failure：执行 CMS GC 的过程中同时有对象要放入老年代，而此时老年代空间不足(可能是 GC 过程中浮动垃圾过多导致暂时性的空间不足)，便会报 Concurrent Mode Failure 错误，并触发 Full GC。")])]),v._v(" "),_("h2",{attrs:{id:"默认的垃圾回收器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#默认的垃圾回收器"}},[v._v("#")]),v._v(" 默认的垃圾回收器")]),v._v(" "),_("ul",[_("li",[v._v("JDK8 默认使用的是 Parallel Scavenge + Parallel Old。但一般不用这个。常用ParNew+CMS吧（因为是唯一搭配呀）")]),v._v(" "),_("li",[v._v("JDK9~16 默认G1")])]),v._v(" "),_("h2",{attrs:{id:"如何判断一个对象已经无效"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何判断一个对象已经无效"}},[v._v("#")]),v._v(" 如何判断一个对象已经无效")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("引用计数法")])]),v._v(" "),_("li",[_("ul",[_("li",[v._v("实现简单，效率高，但是目前主流的虚拟机中并没有选择这个算法来管理内存，其最主要的原因是它很难解决对象之间相互"),_("strong",[v._v("循环引用")]),v._v("的问题。")])])]),v._v(" "),_("li",[_("p",[v._v("可达性分析法（JVM使用的）")])]),v._v(" "),_("li",[_("ul",[_("li",[v._v("通过一系列的称为 "),_("strong",[v._v("“GC Roots”")]),v._v(" 的对象作为起点，从这些节点开始向下搜索，节点所走过的路径称为引用链，当一个对象到 GC Roots 没有任何引用链相连的话，则证明此对象是不可用的。")])])])]),v._v(" "),_("h2",{attrs:{id:"可以作为gc-roots的对象"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#可以作为gc-roots的对象"}},[v._v("#")]),v._v(" 可以作为GC Roots的对象")]),v._v(" "),_("ul",[_("li",[v._v("虚拟机栈（栈帧中的本地变量表）中引用的对象")]),v._v(" "),_("li",[v._v("本地方法栈（Native方法）中引用的对象")]),v._v(" "),_("li",[v._v("方法区中类静态属性引用的对象")]),v._v(" "),_("li",[v._v("方法区中常量引用的对象")]),v._v(" "),_("li",[v._v("所有被同步锁持有的对象")])]),v._v(" "),_("h2",{attrs:{id:"引用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#引用"}},[v._v("#")]),v._v(" 引用")]),v._v(" "),_("p",[v._v("JDK1.2 之前，Java 中引用的定义很传统：如果 reference 类型的数据存储的数值代表的是另一块内存的起始地址，就称这块内存代表一个引用。")]),v._v(" "),_("p",[v._v("JDK1.2 以后，Java 对引用的概念进行了扩充，将引用分为强引用、软引用、弱引用、虚引用四种（引用强度逐渐减弱）")]),v._v(" "),_("ul",[_("li",[v._v("强引用（StrongReference）：垃圾回收器绝不会回收它")]),v._v(" "),_("li",[v._v("软引用（SoftReference）：如果内存空间足够，垃圾回收器就不会回收它，如果内存空间不足了，就会回收这些对象的内存。")]),v._v(" "),_("li",[v._v("弱引用（WeakReference）：不管当前内存空间足够与否，都会回收它的内存。")]),v._v(" "),_("li",[v._v("虚引用（PhantomReference）：如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收。为一个对象设置虚引用关联的唯一目的就是能在这个对象被回收时收到一个系统通知。")])]),v._v(" "),_("h2",{attrs:{id:"常量池的位置"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#常量池的位置"}},[v._v("#")]),v._v(" 常量池的位置")]),v._v(" "),_("p",[v._v("JDK1.7 之前运行时常量池逻辑包含字符串常量池存放在方法区, 此时 hotspot 虚拟机对方法区的实现为永久代。")]),v._v(" "),_("p",[v._v("JDK1.7 字符串常量池被从方法区拿到了堆中, 这里没有提到运行时常量池,也就是说字符串常量池被单独拿到堆,运行时常量池剩下的东西还在方法区, 也就是 hotspot 中的永久代 。")]),v._v(" "),_("p",[v._v("JDK1.8 hotspot 移除了永久代用元空间(Metaspace)取而代之, 这时候字符串常量池还在堆, 运行时常量池还在方法区, 只不过方法区的实现从永久代变成了元空间(Metaspace)")]),v._v(" "),_("p",[v._v('假如在字符串常量池中存在字符串 "abc"，如果当前没有任何 String 对象引用该字符串常量的话，就说明常量 "abc" 就是废弃常量，如果这时发生内存回收的话而且有必要的话，"abc" 就会被系统清理出常量池了。')]),v._v(" "),_("h2",{attrs:{id:"如何判断一个类是无用的类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何判断一个类是无用的类"}},[v._v("#")]),v._v(" 如何判断一个类是无用的类")]),v._v(" "),_("p",[v._v("方法区主要回收的是无用的类，那么如何判断一个类是无用的类的呢？")]),v._v(" "),_("p",[v._v("判定一个常量是否是“废弃常量”比较简单，而要判定一个类是否是“无用的类”的条件则相对苛刻许多。类需要同时满足下面 3 个条件才能算是 "),_("strong",[v._v("“无用的类”")]),v._v(" ：")]),v._v(" "),_("ul",[_("li",[v._v("该类所有的实例都已经被回收，也就是 Java 堆中不存在该类的任何实例。")]),v._v(" "),_("li",[v._v("加载该类的 ClassLoader 已经被回收。")]),v._v(" "),_("li",[v._v("该类对应的 java.lang.Class 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。")])]),v._v(" "),_("p",[v._v("虚拟机可以对满足上述 3 个条件的无用类进行回收，这里说的仅仅是“可以”，而并不是和对象一样不使用了就会必然被回收。")])])}),[],!1,null,null,null);_.default=r.exports}}]);