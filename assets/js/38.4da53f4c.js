(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{362:function(t,a,s){"use strict";s.r(a);var r=s(7),e=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"索引是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引是什么"}},[t._v("#")]),t._v(" 索引是什么")]),t._v(" "),a("p",[a("strong",[t._v("索引是一种数据结构")]),t._v("，它可以帮助我们快速查找和访问数据库中的数据。通过使用索引，数据库系统可以避免全表扫描，从而加快数据访问速度。")]),t._v(" "),a("p",[t._v("在数据库中，索引可以类比于书籍的目录，它可以告诉我们在哪里能够找到某个特定的条目。如果我们需要查找一个特定的记录，而没有索引，那么数据库系统就需要扫描整个表来查找这个记录，这会浪费大量的时间和资源。但是如果我们有了索引，数据库系统就可以快速地定位到存储记录的位置，从而更快地获取需要的数据。")]),t._v(" "),a("p",[t._v("索引可以根据其数据结构的不同分为多种类型，如B+树索引、哈希索引、全文索引等。其中，B-树索引是最常见的一种，它可以处理范围查询和排序操作，并且可以很好地支持高并发和多用户访问的环境。")]),t._v(" "),a("h2",{attrs:{id:"索引的优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引的优点"}},[t._v("#")]),t._v(" 索引的优点")]),t._v(" "),a("ul",[a("li",[t._v("大大减少了服务器需要扫描的数据行数。")]),t._v(" "),a("li",[t._v("帮助服务器避免进行排序和分组，也就不需要创建临时表(B+Tree 索引是有序的，可以用于 ORDER BY 和 GROUP BY 操作。临时表主要是在排序和分组过程中创建，因为不需要排序和分组，也就不需要创建临时表)。")]),t._v(" "),a("li",[t._v("将随机 I/O 变为顺序 I/O(B+Tree 索引是有序的，也就将相邻的数据都存储在一起)。")])]),t._v(" "),a("h2",{attrs:{id:"索引的使用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引的使用场景"}},[t._v("#")]),t._v(" 索引的使用场景")]),t._v(" "),a("p",[t._v("对于非常小的表、大部分情况下简单的全表扫描比建立索引更高效。")]),t._v(" "),a("p",[t._v("对于中到大型的表，索引就非常有效。")]),t._v(" "),a("p",[t._v("但是对于特大型的表，建立和维护索引的代价将会随之增长。这种情况下，需要用到一种技术可以直接区分出需要查询的一组数据，而不是一条记录一条记录地匹配，例如可以使用分区技术。")]),t._v(" "),a("h2",{attrs:{id:"mysql-索引分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql-索引分类"}},[t._v("#")]),t._v(" MySQL 索引分类")]),t._v(" "),a("p",[t._v("按数据结构分类可分为："),a("strong",[t._v("B+tree索引、Hash索引、Full-text索引")]),t._v("。\n按物理存储分类可分为："),a("strong",[t._v("聚簇索引、二级索引（辅助索引、非聚集索引）")]),t._v("。\n按字段特性分类可分为："),a("strong",[t._v("主键索引、普通索引、前缀索引")]),t._v("。\n按字段个数分类可分为："),a("strong",[t._v("单列索引、联合索引（复合索引、组合索引）")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"聚集索引和非聚集索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#聚集索引和非聚集索引"}},[t._v("#")]),t._v(" 聚集索引和非聚集索引")]),t._v(" "),a("p",[t._v("每张表只能有一个聚集索引。")]),t._v(" "),a("p",[t._v("聚集索引是"),a("strong",[t._v("叶子结点存储完整数据")]),t._v("，非聚集索引叶子结点存储聚集索引的地址。")]),t._v(" "),a("p",[t._v("聚集索引，在索引页里直接存放数据，而非聚集索引在索引页里存放的是索引，这些索引指向专门的数据页的数据。")]),t._v(" "),a("p",[t._v("聚集索引一般是表中的主键索引，如果表中没有显示指定主键，则会选择表中的第一个不允许为NULL的唯一索引，如果还是没有的话，就采用Innodb存储引擎为每行数据内置的6字节ROWID作为聚集索引。")]),t._v(" "),a("p",[t._v("聚集索引一定是唯一索引，但唯一索引不一定是聚集索引。")]),t._v(" "),a("h2",{attrs:{id:"mysql-各种索引区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql-各种索引区别"}},[t._v("#")]),t._v(" MySQL 各种索引区别")]),t._v(" "),a("p",[t._v("普通索引 INDEX：最基本的索引，没有任何限制")]),t._v(" "),a("p",[t._v('唯一索引 UNIQUE：与"普通索引"类似，不同的就是：索引列的值必须唯一，但'),a("strong",[t._v("允许有空值")]),t._v("。")]),t._v(" "),a("p",[t._v("主键索引 PRIMARY KEY：是一种特殊的唯一索引，"),a("strong",[t._v("不允许有空值")]),t._v("。")]),t._v(" "),a("p",[t._v("全文索引 FULLTEXT：InnoDB 5.6开始也支持了，针对较大的数据，生成全文索引很耗时好空间。")]),t._v(" "),a("p",[t._v("组合索引：为了更多的提高mysql效率可建立组合索引，遵循”最左前缀“原则。")]),t._v(" "),a("h3",{attrs:{id:"唯一索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#唯一索引"}},[t._v("#")]),t._v(" 唯一索引")]),t._v(" "),a("ul",[a("li",[t._v("唯一索引不允许两行具有相同的索引值")]),t._v(" "),a("li",[t._v("聚集索引一定是唯一索引，但唯一索引不一定是聚集索引。")]),t._v(" "),a("li",[t._v("一个表中可以有多个唯一性索引（Uniq Index），但只能有一个主键。")]),t._v(" "),a("li",[t._v("主键列不允许空值，而唯一性索引列（Uniq Index）允许空值。")])]),t._v(" "),a("h3",{attrs:{id:"哈希索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#哈希索引"}},[t._v("#")]),t._v(" 哈希索引")]),t._v(" "),a("p",[t._v("InnoDB 支持的哈希索引是自适应的，InnoDB 会根据表的使用状况自动为其生成哈希索引，不能人为干预是否在一张表生成哈希索引。")]),t._v(" "),a("h2",{attrs:{id:"索引的选择"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引的选择"}},[t._v("#")]),t._v(" 索引的选择")]),t._v(" "),a("p",[t._v("业务写多读少的场景：由于唯一索引用不上change buffer的优化机制，从性能角度出发建议"),a("strong",[t._v("优先考虑非唯一索引（即普通索引）")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"什么是change-buffer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是change-buffer"}},[t._v("#")]),t._v(" 什么是change buffer")]),t._v(" "),a("p",[t._v("Change buffer是MySQL数据库引擎InnoDB用于优化写入性能的一种机制。在InnoDB存储引擎中，每次进行写入操作时，需要将数据写入到磁盘中的数据文件中，这个过程是比较耗时的。为了优化这个过程，InnoDB使用了Change buffer机制。通过使用Change buffer，InnoDB可以将多个修改操作合并成一个较大的操作，从而减少磁盘I/O的次数，提高写入性能。此外，Change buffer还可以减少磁盘上的随机写入操作，从而降低了磁盘的读写负载。")]),t._v(" "),a("p",[t._v("当需要更新一个数据页时，如果数据页在内存中就直接更新，而如果这个数据页还没有在内存中的话，InooDB会将这些更新操作缓存在change buffer中，这样就不需要从磁盘中读入这个数据页了，在后续的查询中再将这些操作应用到磁盘上的数据页中。在下次查询需要访问这个数据页的时候，将数据页读入内存，然后执行change buffer中与这个页有关的操作，保证数据逻辑的正确性。")]),t._v(" "),a("p",[t._v("将change buffer中的操作应用到原数据页，得到最新结果的过程称为merge。除了访问这个数据页会触发merge外，系统有后台线程会定期merge。在数据库正常关闭（shutdown）的过程中， 也会执行merge操作。")]),t._v(" "),a("p",[t._v("change buffer对更新过程有加速作用，change buffer"),a("strong",[t._v("只限于用在普通索引")]),t._v("的场景下，而不适用于唯一索引。")]),t._v(" "),a("p",[t._v("change buffer 适合"),a("strong",[t._v("写多读少")]),t._v("的业务，因为页面在写完以后马上被访问到的概率比较小。这种业务模型常见的就是账单类、日志类的系统。")]),t._v(" "),a("p",[t._v("反过来，假设一个业务的更新模式是写入之后马上会做查询，那么即使满足了条件，将更新先记录在change buffer，但之后由于马上要访问这个数据页，会立即触发merge过程。这样随机访问 IO的次数不会减少，反而增加了change buffer的维护代价。所以，对于这种业务模式来说，change buffer反而起到了副作用。")]),t._v(" "),a("h2",{attrs:{id:"索引相关sql"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引相关sql"}},[t._v("#")]),t._v(" 索引相关SQL")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看索引")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SHOW")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INDEX")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("tableName"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("databaseName"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建索引")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v("该语句不能创建主键\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("索引名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("表名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("列名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("长度"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ASC")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DESC")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v("在创建表时创建，在"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v("语句中添加\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CONSTRAINT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("索引类型"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("列名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INDEX")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("索引名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("列名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.")]),t._v("在"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v("中添加\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("索引类型"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("列名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INDEX")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("索引名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("列名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UNIQUE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INDEX")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("索引名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("索引类型"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("列名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("…"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n完整"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SQL")]),t._v("：\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INDEX")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("indexName"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("tableName"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("columnName"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("tableName"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INDEX")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("indexName"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("columnName"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"b-树索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#b-树索引"}},[t._v("#")]),t._v(" B+ 树索引")]),t._v(" "),a("p",[t._v("索引是在存储引擎层实现的，而不是在服务器层实现的，所以不同存储引擎具有不同的索引类型和实现。")]),t._v(" "),a("p",[t._v("B+ 树索引是大多数 MySQL 存储引擎的默认索引类型。")]),t._v(" "),a("p",[t._v("B 代表 balance，B+ 树是平衡多路查找树。B+ 树中，"),a("strong",[t._v("所有记录节点")]),t._v("都是按键值大小"),a("strong",[t._v("顺序")]),t._v("存放在同一层的叶子节点上，各"),a("strong",[t._v("叶子节点通过指针进行相连")]),t._v("。")]),t._v(" "),a("p",[t._v("B+树是高度平衡的，叶子节点存放着所有的数据。并且所有叶子节点位于同一层。")]),t._v(" "),a("p",[t._v("B+ Tree 是基于 B Tree 和叶子节点顺序访问指针进行实现，它具有 B Tree 的平衡性，并且通过顺序访问指针来提高区间查询的性能。")]),t._v(" "),a("p",[t._v("在数据库中，B+ 树高度一般在 2~4 层，即查询某一键值的行记录最多只需 2~4 次 IO。一般机械磁盘每秒可以做100次IO，2~4 次IO只需0.02~0.04秒。")]),t._v(" "),a("p",[t._v("B+ 树索引可以分为聚集索引（clustered index）和辅助索引（secondary index，也叫非聚集索引）。但不管是聚集还是辅助索引，底层都是B+树。区别在于，叶子节点存放的是否是一整行的数据。")]),t._v(" "),a("p",[t._v("聚集索引的优点在于，对主键的排序查找和范围查找速度非常快。")]),t._v(" "),a("p",[t._v("辅助索引的叶子节点不包含行记录的所有信息，只包含键值和对应行数据的聚集索引键。")]),t._v(" "),a("br"),t._v(" "),a("p",[t._v("操作：")]),t._v(" "),a("p",[t._v("进行查找操作时，首先在根节点进行二分查找，找到一个 key 所在的指针，然后递归地在指针所指向的节点进行查找。直到查找到叶子节点，然后在叶子节点上进行二分查找，找出 key 所对应的 data。")]),t._v(" "),a("p",[t._v("插入删除操作记录会破坏平衡树的平衡性，因此在插入删除操作之后，需要对树进行一个分裂、合并、旋转等操作来维护平衡性。")]),t._v(" "),a("h2",{attrs:{id:"b树和b-树的对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#b树和b-树的对比"}},[t._v("#")]),t._v(" B树和B+树的对比")]),t._v(" "),a("p",[t._v("B+ 树在B树的基础上，为叶子节点增加了链表指针，所有数据都存储在叶子节点。非叶子节点作为叶子节点的索引。")]),t._v(" "),a("p",[t._v("B+ 树相对于 B树的优势在于：")]),t._v(" "),a("ul",[a("li",[t._v("只有叶子节点存储数据，单一节点可以存储的元素就更多了，使得查询的IO次数更少，因此更适合做为数据库底层数据结构。")]),t._v(" "),a("li",[t._v("所有的叶子节点形成了一个有序链表，更加便于查找。")]),t._v(" "),a("li",[t._v("B+树支持range-query(区间查询)非常方便，而B树不支持。")])]),t._v(" "),a("h2",{attrs:{id:"b-树和红黑树的对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#b-树和红黑树的对比"}},[t._v("#")]),t._v(" B+树和红黑树的对比")]),t._v(" "),a("p",[t._v("红黑树等平衡树也可以用来实现索引，但是文件系统及数据库系统普遍采用 B+ Tree 作为索引结构，主要有以下两个原因:")]),t._v(" "),a("ol",[a("li",[t._v("更少的查找次数")])]),t._v(" "),a("p",[t._v("平衡树查找操作的时间复杂度等于树高 h，而树高大致为 O(h)=O(logdN)，其中 d 为每个节点的出度。")]),t._v(" "),a("p",[t._v("红黑树的出度为 2，而 B+ Tree 的出度一般都非常大，所以红黑树的树高 h 很明显比 B+ Tree 大非常多，检索的次数也就更多。")]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("利用计算机预读特性")])]),t._v(" "),a("p",[t._v("为了减少磁盘 I/O，磁盘往往不是严格按需读取，而是每次都会预读。预读过程中，磁盘进行顺序读取，顺序读取不需要进行磁盘寻道，并且只需要很短的旋转时间，因此速度会非常快。")]),t._v(" "),a("p",[t._v("操作系统一般将内存和磁盘分割成固态大小的块，每一块称为一页，内存与磁盘以页为单位交换数据。数据库系统将索引的一个节点的大小设置为页的大小，使得一次 I/O 就能完全载入一个节点，并且可以利用预读特性，相邻的节点也能够被预先载入。")]),t._v(" "),a("h2",{attrs:{id:"覆盖索引-covering-index"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#覆盖索引-covering-index"}},[t._v("#")]),t._v(" 覆盖索引（covering index）")]),t._v(" "),a("p",[t._v("即从辅助索引中就可以查询到需要的信息，不需要再去查询聚集索引的信息，减少了回表，减少了IO。")]),t._v(" "),a("h2",{attrs:{id:"索引下推-index-condition-pushdown-icp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引下推-index-condition-pushdown-icp"}},[t._v("#")]),t._v(" 索引下推（index condition pushdown，ICP）")]),t._v(" "),a("p",[t._v("不支持 ICP 时，当进行索引查询时，首先根据索引查找到记录，再根据 where 条件过滤记录。而支持 ICP的话，在取出索引的同时，进行 where 条件的过滤，即将 where 操作放在了存储引擎层。在某些查询下，可以大大减少上层SQL层对记录的索取，也减少了回表次数。")]),t._v(" "),a("h2",{attrs:{id:"索引失效常见场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引失效常见场景"}},[t._v("#")]),t._v(" 索引失效常见场景")]),t._v(" "),a("ul",[a("li",[t._v("违反最左前缀匹配原则。例如有索引index(a,b)，但查询条件只有b字段。")]),t._v(" "),a("li",[t._v("在索引列上做任何操作，包括计算、函数、类型转换等。")]),t._v(" "),a("li",[t._v("范围查询使联合索引停止匹配。")]),t._v(" "),a("li",[t._v("减少select*的使用。避免不必要的回表操作开销，尽量使用覆盖索引。")]),t._v(" "),a("li",[t._v("使用不等于（!=、<>），使用or操作。")]),t._v(" "),a("li",[t._v("字符串不加单引号索引失效。")]),t._v(" "),a("li",[t._v("like以通配符开头'%abc'。注意like ‘abc%’ 是可以走索引的。")]),t._v(" "),a("li",[t._v("order by 违反最左匹配原则，含非索引字段排序，会产生文件排序。")]),t._v(" "),a("li",[t._v("group by 违反最左匹配原则，含非索引字段分组，会导致产生临时表。")])]),t._v(" "),a("h2",{attrs:{id:"建索引的几大原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#建索引的几大原则"}},[t._v("#")]),t._v(" 建索引的几大原则")]),t._v(" "),a("ul",[a("li",[t._v("最左前缀匹配原则，非常重要的原则\n"),a("ul",[a("li",[t._v("mysql会一直向右匹配直到遇到范围查询(>、<、between、like)就停止匹配，")]),t._v(" "),a("li",[t._v("比如a = 1 and b = 2 and c > 3 and d = 4\n"),a("ul",[a("li",[t._v("如果建立(a,b,c,d)顺序的索引，d是用不到索引的，")]),t._v(" "),a("li",[t._v("如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整（建立索引时他们三个的顺序）")])])])])]),t._v(" "),a("li",[t._v("=和in可以乱序，\n"),a("ul",[a("li",[t._v("比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引"),a("strong",[t._v("可以任意顺序")]),t._v("，")]),t._v(" "),a("li",[t._v("mysql的查询优化器会帮你优化成索引可以识别的形式。")])])]),t._v(" "),a("li",[t._v("尽量选择区分度高的列作为索引，\n"),a("ul",[a("li",[t._v("区分度的公式是count(distinct col)/count(*)，表示字段不重复的比例，比例越大我们扫描的记录数越少，唯一键的区分度是1")])])])]),t._v(" "),a("h2",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料：")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://blog.mimvp.com/article/7462.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("主键与唯一索引的区别"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/39293940",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL聚集索引和非聚集索引"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://developer.huawei.com/consumer/cn/forum/topic/0204405591412170236",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL索引都有哪些分类？"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=e.exports}}]);