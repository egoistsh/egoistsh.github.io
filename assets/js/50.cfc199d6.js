(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{374:function(e,s,v){"use strict";v.r(s);var t=v(7),_=Object(t.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"redis参考资料汇总"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis参考资料汇总"}},[e._v("#")]),e._v(" Redis参考资料汇总")]),e._v(" "),s("ul",[s("li",[e._v("http://www.topjavaer.cn/redis/redis-basic/")]),e._v(" "),s("li",[e._v("https://www.iamshuaidi.com/redis-interview")]),e._v(" "),s("li",[e._v("https://xie.infoq.cn/article/6c3500c66c3cdee3d72b88780")]),e._v(" "),s("li",[e._v("https://zhuanlan.zhihu.com/p/553803052")]),e._v(" "),s("li",[e._v("https://segmentfault.com/blog/magebyte")])]),e._v(" "),s("h2",{attrs:{id:"redis优缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis优缺点"}},[e._v("#")]),e._v(" Redis优缺点？")]),e._v(" "),s("p",[s("strong",[e._v("优点")]),e._v("：")]),e._v(" "),s("ol",[s("li",[s("strong",[e._v("基于内存操作")]),e._v("，内存读写速度快。")]),e._v(" "),s("li",[s("strong",[e._v("支持多种数据类型")]),e._v("，包括String、Hash、List、Set、ZSet等。")]),e._v(" "),s("li",[s("strong",[e._v("支持持久化")]),e._v("。Redis支持RDB和AOF两种持久化机制，持久化功能可以有效地避免数据丢失问题。")]),e._v(" "),s("li",[s("strong",[e._v("支持事务")]),e._v("。Redis的所有操作都是原子性的，同时Redis还支持对几个操作合并后的原子性执行。")]),e._v(" "),s("li",[s("strong",[e._v("支持主从复制")]),e._v("。主节点会自动将数据同步到从节点，可以进行读写分离。")]),e._v(" "),s("li",[e._v("Redis命令的处理是"),s("strong",[e._v("单线程")]),e._v("的，避免线程切换开销及多线程的竞争问题。Redis6.0引入了多线程，需要注意的是，"),s("strong",[e._v("多线程用于处理网络数据的读写和协议解析")]),e._v("，Redis命令执行还是单线程的。")])]),e._v(" "),s("p",[s("strong",[e._v("缺点")]),e._v("：")]),e._v(" "),s("ol",[s("li",[e._v("对结构化查询的支持比较差。")]),e._v(" "),s("li",[e._v("数据库容量受到物理内存的限制，不适合用作海量数据的高性能读写，因此Redis适合的场景主要局限在较小数据量的操作。")]),e._v(" "),s("li",[e._v("Redis 较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。")])]),e._v(" "),s("h2",{attrs:{id:"redis为什么这么快"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis为什么这么快"}},[e._v("#")]),e._v(" Redis为什么这么快？")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("基于内存")]),e._v("：Redis是使用内存存储，没有磁盘IO上的开销。数据存在内存中，读写速度快。")]),e._v(" "),s("li",[s("strong",[e._v("IO多路复用模型")]),e._v("：Redis 采用 IO 多路复用技术。Redis 使用单线程来轮询描述符，将数据库的操作都转换成了事件，不在网络I/O上浪费过多的时间。非阻塞 IO。")]),e._v(" "),s("li",[s("strong",[e._v("高效的数据结构")]),e._v("：Redis 每种数据类型底层都做了优化，目的就是为了追求更快的速度。动态字符串(SDS)，链表，字典，跳跃链表，整数集合和压缩列表。在这个基础上去实现用户能操作的对象：字符串，列表，哈希，集合，有序集合等对象。")]),e._v(" "),s("li",[e._v("单线程避免了多线程的频繁上下文切换带来的性能问题，也不用考虑锁的问题。")])]),e._v(" "),s("h2",{attrs:{id:"redis-为什么用单线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis-为什么用单线程"}},[e._v("#")]),e._v(" Redis 为什么用单线程？")]),e._v(" "),s("p",[e._v("因为 Redis 是基于内存的操作，CPU 不是 Redis 的瓶颈，Redis 的瓶颈可能是机器内存的大小或网络带宽。")]),e._v(" "),s("p",[e._v("大多数Redis操作不需要太多的CPU计算，而是依赖于内存的快速读写。")]),e._v(" "),s("p",[e._v("即然单线程容易实现，CPU又不是瓶颈，那就使用单线程，节省很多麻烦。")]),e._v(" "),s("h2",{attrs:{id:"redis-中的reactor模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis-中的reactor模型"}},[e._v("#")]),e._v(" Redis 中的Reactor模型")]),e._v(" "),s("p",[e._v("IO多路复用技术的好处：多个socket连接，复用一个线程。")]),e._v(" "),s("p",[e._v("IO多路复用技术，借助操作系统的支持，服务端一个线程可以同时监听多个网络连接，一旦某个连接上有事件需要处理，就能通知线程执行相应的读写操作。")]),e._v(" "),s("p",[e._v("Linux所提供的poll, select, epoll都属于IO多路复用技术，由于select和poll在实现上的缺陷（如内核和用户空间内存拷贝问题），现在服务端变成大多使用epoll。")]),e._v(" "),s("p",[e._v("Reactor 模型是一个比较广泛的概念。可以泛指IO多路复用技术。Reactor模式也叫Dispatcher模式，即I/O多路复用统一监听事件，收到事件后分配（Dispatch）给某个进程。")]),e._v(" "),s("blockquote",[s("p",[e._v("Reactor: The reactor design pattern is an "),s("strong",[e._v("event handling pattern")]),e._v(" for handling service delivered concurrently to a service handler by "),s("strong",[e._v("one or more inputs.")]),e._v(" The service handler then "),s("strong",[e._v("demultiplexes the incoming requests and dispatches them")]),e._v(" synchronously to the associated request handlers.")])]),e._v(" "),s("p",[e._v("单I/O线程模型图：")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://p.ipic.vip/r0szuu.png",alt:"image-20230317163655297"}})]),e._v(" "),s("p",[s("img",{attrs:{src:"https://p.ipic.vip/l7gj3j.png",alt:"image-20230317163921257"}})]),e._v(" "),s("p",[e._v("多I/O线程模型图：")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://p.ipic.vip/1gf9sw.png",alt:"image-20230317163936905"}})]),e._v(" "),s("ul",[s("li",[e._v("https://www.51cto.com/article/697808.html")]),e._v(" "),s("li",[e._v("https://juejin.cn/post/7124667316637270046#heading-1")])]),e._v(" "),s("h2",{attrs:{id:"应用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[e._v("#")]),e._v(" 应用场景")]),e._v(" "),s("ol",[s("li",[s("strong",[e._v("缓存")]),e._v("热点数据，缓解数据库的压力。")]),e._v(" "),s("li",[e._v("利用Redis中原子性的自增操作，可以用使用实现"),s("strong",[e._v("计算器")]),e._v("的功能，比如统计用户点赞数、用户访问数等，这类操作如果用MySQL，频繁的读写会带来相当大的压力。")]),e._v(" "),s("li",[s("strong",[e._v("简单消息队列")]),e._v("，不要求高可靠的情况下，可以使用Redis自身的发布/订阅模式或者List来实现一个队列，实现异步操作。")]),e._v(" "),s("li",[e._v("好友关系，利用集合的一些命令，比如求交集、并集、差集等。可以方便搞定一些共同好友、共同爱好之类的功能。")]),e._v(" "),s("li",[s("strong",[e._v("限流")]),e._v("，比较典型的使用场景是限制某个用户访问某个API的频率，常用的有抢购时，防止用户疯狂点击带来不必要的压力。")])]),e._v(" "),s("h2",{attrs:{id:"memcached和redis的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#memcached和redis的区别"}},[e._v("#")]),e._v(" Memcached和Redis的区别")]),e._v(" "),s("ul",[s("li",[e._v("Redis只使用单核，而Memcached可以使用多核。")]),e._v(" "),s("li",[e._v("MemCached数据结构单一，仅用来缓存数据，而Redis支持更加丰富的数据类型，也可以在服务器端直接对数据进行丰富的操作，这样可以减少网络IO次数和数据体积。")]),e._v(" "),s("li",[e._v("MemCached不支持数据持久化，断电或重启后数据消失。Redis支持数据持久化和数据恢复，允许单点故障。")])]),e._v(" "),s("h2",{attrs:{id:"为什么要用-redis-而不用-map-guava-做缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么要用-redis-而不用-map-guava-做缓存"}},[e._v("#")]),e._v(" 为什么要用 Redis 而不用 map/guava 做缓存?")]),e._v(" "),s("p",[e._v("使用自带的 map 或者 guava 实现的是"),s("strong",[e._v("本地缓存")]),e._v("，最主要的特点是轻量以及快速，生命周期随着 jvm 的销毁而结束，并且在多实例的情况下，每个实例都需要各自保存一份缓存，缓存不具有一致性。")]),e._v(" "),s("p",[e._v("使用 redis 或 memcached 之类的称为"),s("strong",[e._v("分布式缓存")]),e._v("，在多实例的情况下，各实例共用一份缓存数据，缓存具有一致性。缺点是需要保持redis或memcached服务的高可用，整个程序架构上较为复杂。")]),e._v(" "),s("p",[e._v("比如：")]),e._v(" "),s("p",[e._v("1、Redis 可以用几十 G 内存来做缓存，Map 不行，一般 JVM 也就分几个 G 数据就够大了；")]),e._v(" "),s("p",[e._v("2、Redis 的缓存可以持久化，Map 是内存对象，程序一重启数据就没了；")]),e._v(" "),s("p",[e._v("3、Redis 可以实现分布式的缓存，Map 只能存在创建它的程序里；")]),e._v(" "),s("p",[e._v("4、Redis 可以处理每秒百万级的并发，是专业的缓存服务，Map 只是一个普通的对象；")]),e._v(" "),s("p",[e._v("5、Redis 缓存有过期机制，Map 本身无此功能；Redis 有丰富的 API，Map 就简单太多了；")]),e._v(" "),s("p",[e._v("6、Redis可单独部署，多个项目之间可以共享，本地内存无法共享；")]),e._v(" "),s("p",[e._v("7、Redis有专门的管理工具可以查看缓存数据。")])])}),[],!1,null,null,null);s.default=_.exports}}]);