(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{361:function(a,r,t){"use strict";t.r(r);var c=t(7),s=Object(c.a)({},(function(){var a=this,r=a._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("p",[a._v("CyclicBarrier（循环屏障）是Java并发编程中的一个同步工具类，它可以让一组线程在达到某个共同点之前互相等待，然后同时继续执行。")]),a._v(" "),r("h2",{attrs:{id:"cyclicbarrier-的特点如下"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cyclicbarrier-的特点如下"}},[a._v("#")]),a._v(" CyclicBarrier 的特点如下：")]),a._v(" "),r("ol",[r("li",[a._v("共同点：CyclicBarrier 可以设置一个共同点，当等待的线程数达到指定数量时，所有线程将同时被释放，继续执行后续操作。")]),a._v(" "),r("li",[a._v("循环使用：CyclicBarrier 可以被多次使用。当所有线程都被释放后，CyclicBarrier 会被重置，并可以再次使用。")]),a._v(" "),r("li",[a._v("等待与释放：线程通过调用 CyclicBarrier 的 await() 方法进入等待状态，当指定数量的线程都调用了 await() 方法后，所有线程会同时被释放，继续执行后续操作。")])]),a._v(" "),r("h2",{attrs:{id:"核心方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#核心方法"}},[a._v("#")]),a._v(" 核心方法")]),a._v(" "),r("div",{staticClass:"language-java extra-class"},[r("pre",{pre:!0,attrs:{class:"language-java"}},[r("code",[r("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 构造方法")]),a._v("\n"),r("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("CyclicBarrier")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),r("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Runnable")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 指定关联该CyclicBarrier的线程数量，并且可以指定在所有线程都进入屏障后的执行动作，该执行动作由最后一个进行屏障的线程执行。")]),a._v("\n"),r("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("CyclicBarrier")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),r("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\ncb"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[a._v("await")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),r("p",[a._v("在所有线程进入屏障后会调用 nextGeneration()，即生成下一个版本，所有线程又可以重新进入到屏障中。要注意"),r("code",[a._v("barrier.await()")]),a._v("方法的调用次数应该与创建CyclicBarrier时指定的线程数量相匹配，以确保正确的同步和等待行为。")]),a._v(" "),r("h2",{attrs:{id:"cyclicbarrier-和-countdonwlatch-的对比"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cyclicbarrier-和-countdonwlatch-的对比"}},[a._v("#")]),a._v(" CyclicBarrier 和 CountDonwLatch 的对比")]),a._v(" "),r("ul",[r("li",[r("p",[a._v("CountDownLatch减计数，CyclicBarrier加计数。")])]),a._v(" "),r("li",[r("p",[a._v("CountDownLatch是一次性的，CyclicBarrier可以重用。")])]),a._v(" "),r("li",[r("p",[a._v("CountDownLatch和CyclicBarrier都有让多个线程等待同步然后再开始下一步动作的意思，但是CountDownLatch的下一步的动作实施者是主线程，具有不可重复性；而CyclicBarrier的下一步动作实施者还是“其他线程”本身，具有往复多次实施动作的特点。")])]),a._v(" "),r("li",[r("p",[a._v("对于CountDownLatch，其他线程为游戏玩家，比如英雄联盟，主线程为控制游戏开始的线程。在所有的玩家都准备好之前，主线程是处于等待状态的，也就是游戏不能开始。当所有的玩家准备好之后，下一步的动作实施者为主线程，即开始游戏。")])]),a._v(" "),r("li",[r("p",[a._v("对于CyclicBarrier，假设有一家公司要全体员工进行团建活动，活动内容为翻越三个障碍物，每一个人翻越障碍物所用的时间是不一样的。但是公司要求所有人在翻越当前障碍物之后再开始翻越下一个障碍物，也就是所有人翻越第一个障碍物之后，才开始翻越第二个，以此类推。类比地，每一个员工都是一个“其他线程”。当所有人都翻越的所有的障碍物之后，程序才结束。而主线程可能早就结束了，这里我们不用管主线程。")])])]),a._v(" "),r("h2",{attrs:{id:"cyclicbarrier-的应用场景包括以下几个方面"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cyclicbarrier-的应用场景包括以下几个方面"}},[a._v("#")]),a._v(" CyclicBarrier 的应用场景包括以下几个方面：")]),a._v(" "),r("ol",[r("li",[a._v("并行计算任务的拆分与合并：当一个大型计算任务可以被拆分为多个子任务并行执行时，可以使用 CyclicBarrier 来等待所有子任务完成后再进行合并计算。")]),a._v(" "),r("li",[a._v("多线程任务的阶段同步：当一个任务需要按照阶段进行多次并发操作，每个阶段需要等待所有线程都完成后才能继续下一阶段，可以使用 CyclicBarrier 来实现阶段间的同步。")]),a._v(" "),r("li",[a._v("并发流水线的流程控制：当多个线程需要按照特定的流水线方式执行任务，每个线程在完成一定操作后需要等待其他线程才能继续，可以使用 CyclicBarrier 来实现线程之间的同步。")])])])}),[],!1,null,null,null);r.default=s.exports}}]);