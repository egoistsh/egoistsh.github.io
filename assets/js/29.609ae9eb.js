(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{353:function(t,a,s){"use strict";s.r(a);var n=s(7),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"什么是线程-什么是进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是线程-什么是进程"}},[t._v("#")]),t._v(" 什么是线程？什么是进程？")]),t._v(" "),a("p",[t._v("线程和进程是操作系统中的两个重要概念，它们都是并发执行的基本单位。")]),t._v(" "),a("p",[a("strong",[t._v("进程是程序的一次执行过程")]),t._v("，是操作系统资源分配的基本单位，每个进程都有独立的地址空间、文件描述符、信号处理和状态等信息。进程可以创建子进程，不同进程之间的通信需要使用进程间通信机制。")]),t._v(" "),a("p",[a("strong",[t._v("线程是进程中的一个执行单元")]),t._v("，是程序执行的最小单位，每个线程共享进程的地址空间、文件描述符和其他资源。线程在同一进程内执行，可以访问共享数据，因此需要使用同步机制来避免资源竞争。线程之间的切换比进程之间的切换更快，因为线程共享进程的地址空间和其他资源，不需要进行资源的复制和切换。")]),t._v(" "),a("p",[t._v("总的来说，进程和线程都是操作系统中并发执行的基本单位，但进程之间的隔离性更强，资源消耗更大，线程之间的切换更快，共享资源更多。在编写程序时，需要根据具体的需求选择使用进程还是线程来实现并发执行。")]),t._v(" "),a("h2",{attrs:{id:"线程的缺点有什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程的缺点有什么"}},[t._v("#")]),t._v(" 线程的缺点有什么？")]),t._v(" "),a("ul",[a("li",[t._v("频繁的上下文切换：当一个线程需要访问共享资源时，其他线程可能会被挂起，这会导致大量的上下文切换，降低了系统的性能。")]),t._v(" "),a("li",[t._v("资源竞争：多个线程访问同一共享资源时，可能会导致资源竞争和死锁问题，需要使用"),a("strong",[t._v("同步机制")]),t._v("来解决。")]),t._v(" "),a("li",[t._v("内存占用：每个线程都需要一定的栈空间和线程控制块等资源，当创建大量线程时，可能会导致内存占用过高。")]),t._v(" "),a("li",[t._v("可靠性问题：线程之间的错误和异常可能会导致整个程序崩溃，因此需要小心地编写和管理线程代码。")]),t._v(" "),a("li",[t._v("复杂性问题：线程编程需要考虑线程之间的交互和同步，增加了程序的复杂性和维护难度。")])]),t._v(" "),a("h2",{attrs:{id:"有了进程为什么还要线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#有了进程为什么还要线程"}},[t._v("#")]),t._v(" 有了进程为什么还要线程？")]),t._v(" "),a("p",[t._v("虽然进程是操作系统资源分配的基本单位，但是线程比进程更轻量级，执行速度更快，因此线程在并发编程中有以下优势：")]),t._v(" "),a("ul",[a("li",[t._v("更快的切换：线程之间的切换比进程之间的切换更快，因为线程共享进程的地址空间和其他资源，不需要进行资源的复制和切换。这意味着在需要大量并发执行的场景下，使用线程可以更有效地利用计算资源。")]),t._v(" "),a("li",[t._v("更低的资源消耗：每个进程都需要独立的地址空间、文件描述符和其他资源，因此进程的资源消耗比线程更大。使用线程可以减少系统资源的占用，提高系统的性能。")]),t._v(" "),a("li",[t._v("更好的通信和同步：线程共享进程的地址空间和其他资源，因此线程之间的通信和同步更容易实现。在多线程编程中，可以使用锁、信号量、条件变量等同步机制来协调线程之间的执行。")]),t._v(" "),a("li",[t._v("更容易实现并发编程：使用线程可以更容易地实现并发编程，因为线程可以利用多核处理器并行执行任务，而不需要手动编写复杂的进程间通信代码。")])]),t._v(" "),a("p",[t._v("总之，尽管进程和线程都可以实现并发编程，但是线程更适合于需要高效利用计算资源的场景，更容易实现通信和同步，并且编写起来更加简单。")]),t._v(" "),a("h2",{attrs:{id:"有了线程为什么要有进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#有了线程为什么要有进程"}},[t._v("#")]),t._v(" 有了线程为什么要有进程？")]),t._v(" "),a("p",[t._v("虽然线程比进程更轻量级，但是进程在操作系统中仍然扮演着至关重要的角色，有以下几个方面的优势：")]),t._v(" "),a("ul",[a("li",[t._v("更强的隔离性：每个进程都有独立的地址空间、文件描述符、信号处理和状态等信息，因此不同进程之间的代码和数据是相互隔离的。这样可以保证程序的安全性和稳定性，避免因为一个进程的崩溃导致整个系统崩溃。")]),t._v(" "),a("li",[t._v("更好的可靠性：进程之间的错误和异常可以被隔离，避免一个进程的错误影响其他进程的正常运行。此外，进程可以使用操作系统提供的监控机制来检测和恢复错误，增强程序的可靠性和稳定性。")]),t._v(" "),a("li",[t._v("更多的编程模型：进程可以使用多种编程模型来实现并发编程，包括多进程模型、多线程模型和协程模型等。这些模型可以根据不同的需求选择使用，从而实现更加灵活的编程。")]),t._v(" "),a("li",[t._v("更多的资源：每个进程都可以拥有独立的资源，包括文件、端口、socket等。这些资源可以被不同的进程所共享，从而实现更加灵活的资源管理。")])]),t._v(" "),a("p",[t._v("虽然线程比进程更轻量级，但是进程仍然是操作系统中不可或缺的概念，可以提供更好的隔离性、可靠性和编程模型。")]),t._v(" "),a("h2",{attrs:{id:"线程间的内存是共享的吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程间的内存是共享的吗"}},[t._v("#")]),t._v(" 线程间的内存是共享的吗？")]),t._v(" "),a("p",[t._v("是的，线程之间的内存是共享的。在同一个进程中的所有线程共享同一份地址空间，这意味着它们可以直接访问同一份内存，包括全局变量、静态变量、动态分配的内存和堆栈等。")]),t._v(" "),a("p",[t._v("因此，在多线程编程中，需要特别注意线程间的内存访问，以避免出现数据竞争等问题。如果多个线程同时读写同一块内存，可能会导致数据的不一致，这称为竞态条件。为了避免这种情况，需要使用同步机制来协调线程之间的访问，比如使用锁、信号量、条件变量等。")]),t._v(" "),a("p",[t._v("此外，"),a("strong",[t._v("在多线程编程中，还需要注意线程之间的内存可见性")]),t._v("。如果一个线程修改了一块内存，其他线程可能无法立即看到这个修改。为了解决这个问题，需要使用同步机制来确保内存可见性，比如使用volatile变量、memory barrier等。")]),t._v(" "),a("p",[t._v("总之，线程之间的内存是共享的，需要特别注意线程之间的内存访问和同步，以确保程序的正确性和性能。")]),t._v(" "),a("h2",{attrs:{id:"java中的锁机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java中的锁机制"}},[t._v("#")]),t._v(" Java中的锁机制")]),t._v(" "),a("p",[t._v("Java中的锁机制主要包括以下几种：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("synchronized关键字：synchronized是Java中最基本的锁机制，它可以实现对代码块、方法或者对象的同步访问。synchronized关键字可以保证在同一时刻只有一个线程可以进入被锁定的代码块或方法，从而避免线程间的数据竞争。")])]),t._v(" "),a("li",[a("p",[t._v("ReentrantLock类：ReentrantLock是Java中的一个可重入锁，它提供了与synchronized相似的锁机制，但是更加灵活和可扩展。与synchronized不同的是，ReentrantLock可以实现公平锁和非公平锁，可以支持多个条件变量等高级特性。")])]),t._v(" "),a("li",[a("p",[t._v("ReadWriteLock接口：ReadWriteLock是Java中的一个读写锁接口，它可以实现对共享数据的读写分离。ReadWriteLock允许多个线程同时读取共享数据，但是只允许一个线程写入共享数据，从而避免了读写之间的竞态条件。")])]),t._v(" "),a("li",[a("p",[t._v("StampedLock类：StampedLock是Java中的一个乐观读写锁，它提供了对共享数据的读写访问，并支持无锁CAS操作。StampedLock的乐观读取机制可以避免读写冲突的情况下使用悲观锁带来的性能损失。")])]),t._v(" "),a("li",[a("p",[t._v("CountDownLatch类：CountDownLatch是Java中的一个倒计时锁，它可以让一个线程等待多个线程执行完毕之后再继续执行。CountDownLatch的计数器初始值可以设置为多少个线程，当每个线程执行完毕后就会递减计数器，当计数器为0时，等待的线程就会被唤醒。")])]),t._v(" "),a("li",[a("p",[t._v("Semaphore类：Semaphore是Java中的一个信号量，它可以限制多个线程对资源的访问。Semaphore的计数器可以指定多少个线程可以同时访问资源，当线程访问完毕之后，计数器会自动递增。")])]),t._v(" "),a("li",[a("p",[t._v("Exchanger类：Exchanger是Java中的一个线程间交换数据的工具类，它可以让两个线程交换彼此的数据。Exchanger可以用于解决线程之间的数据交换问题，例如数据传输、缓存池等场景。")])])]),t._v(" "),a("p",[t._v("除了以上列举的锁机制，Java中还有一些其他的并发工具类，如Semaphore、CyclicBarrier、LockSupport等，它们可以帮助我们更加方便和高效地实现多线程编程。")]),t._v(" "),a("h2",{attrs:{id:"reentranlock是悲观锁还是乐观锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reentranlock是悲观锁还是乐观锁"}},[t._v("#")]),t._v(" ReentranLock是悲观锁还是乐观锁？")]),t._v(" "),a("p",[t._v("ReentrantLock 是属于悲观锁的范畴。")]),t._v(" "),a("p",[t._v("悲观锁是一种保守的锁策略，它在使用锁之前总是假设有其他线程正在使用该共享资源，并且在加锁后直到解锁前都会占用锁，阻止其他线程访问该共享资源。这种策略的优点是可以有效避免并发访问的冲突，但同时也会带来一定的开销。")]),t._v(" "),a("p",[t._v('ReentrantLock 在进行加锁操作时，会尝试获取锁，如果当前没有其他线程持有该锁，则会成功获取并占用锁，如果有其他线程持有该锁，则当前线程会被阻塞，等待其他线程释放锁。由于 ReentrantLock 可以重入，即同一个线程可以多次获取同一个锁而不会造成死锁，所以它的命名中包含了 "Reentrant"（可重入）这一词汇。')]),t._v(" "),a("p",[t._v("与乐观锁不同，悲观锁的主要特点是在访问共享资源之前，总是先获取锁，因此 ReentrantLock 不属于乐观锁的范畴。")]),t._v(" "),a("h2",{attrs:{id:"悲观锁和乐观锁的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#悲观锁和乐观锁的区别"}},[t._v("#")]),t._v(" 悲观锁和乐观锁的区别")]),t._v(" "),a("p",[t._v("悲观锁和乐观锁是两种并发控制的策略，它们的区别如下：")]),t._v(" "),a("ul",[a("li",[t._v("性能差异：悲观锁在使用锁之前总是假设有其他线程正在使用该共享资源，并且在加锁后直到解锁前都会占用锁，阻止其他线程访问该共享资源。这种策略的优点是可以有效避免并发访问的冲突，但同时也会带来一定的开销。乐观锁则假设并发冲突不会发生，直接进行并发操作，如果发现冲突则进行回滚或重试。因此，乐观锁的性能一般比悲观锁要好。")]),t._v(" "),a("li",[t._v("实现方式：悲观锁的实现方式通常是使用 synchronized、ReentrantLock 等锁机制，而乐观锁的实现方式通常是使用 CAS（Compare And Swap）等乐观并发控制机制。")]),t._v(" "),a("li",[t._v("冲突解决方式：悲观锁在加锁期间，阻止其他线程访问共享资源，从而避免并发冲突。乐观锁则假设并发冲突不会发生，在操作结束后才会检查并发冲突，如果发现冲突则进行回滚或重试。")]),t._v(" "),a("li",[t._v("应用场景：悲观锁适用于并发冲突概率较高的场景，例如在高并发访问数据库时，由于每次访问需要获取独占锁，因此悲观锁的效果会比较好。而乐观锁适用于并发冲突概率较低的场景，例如在单机多线程环境下，由于并发冲突概率较低，使用乐观锁可以提高性能。")])]),t._v(" "),a("h2",{attrs:{id:"java中乐观锁的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java中乐观锁的实现"}},[t._v("#")]),t._v(" Java中乐观锁的实现")]),t._v(" "),a("p",[t._v("在 Java 中，乐观锁主要有两种实现方式：CAS 和版本号。")]),t._v(" "),a("h3",{attrs:{id:"cas-compare-and-swap-实现乐观锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cas-compare-and-swap-实现乐观锁"}},[t._v("#")]),t._v(" CAS（Compare And Swap）实现乐观锁")]),t._v(" "),a("p",[t._v("CAS 是一种乐观锁的实现方式，它使用原子性操作来实现并发控制。CAS 操作需要提供要更新的变量的值、预期值和新值，如果当前变量的值等于预期值，就使用新值更新变量并返回 true，否则不做任何操作并返回 false。")]),t._v(" "),a("p",[t._v("Java 中的 AtomicInteger 和 AtomicLong 类就是使用 CAS 实现乐观锁的典型例子。使用 CAS 实现乐观锁时，需要注意 CAS 操作可能会出现 ABA 问题，需要额外的处理措施来解决这个问题。")]),t._v(" "),a("h3",{attrs:{id:"版本号实现乐观锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#版本号实现乐观锁"}},[t._v("#")]),t._v(" 版本号实现乐观锁")]),t._v(" "),a("p",[t._v("另一种实现乐观锁的方式是通过版本号实现。在实现版本号乐观锁时，每个共享数据都有一个版本号，每次更新时都需要比较当前版本号和要更新的数据的版本号，如果一致，则更新成功，并增加版本号，否则更新失败。")]),t._v(" "),a("p",[t._v("在 Java 中，实现版本号乐观锁可以使用 AtomicStampedReference 类，它可以对一个对象的引用和版本号进行原子操作。使用 AtomicStampedReference 时需要注意，每次更新时需要同时更新对象引用和版本号，否则可能会出现数据不一致的问题。")]),t._v(" "),a("h2",{attrs:{id:"java中乐观锁的类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java中乐观锁的类"}},[t._v("#")]),t._v(" Java中乐观锁的类")]),t._v(" "),a("p",[t._v("Java中乐观锁的实现类包括：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Atomic 包下的原子类：例如 AtomicInteger、AtomicLong、AtomicReference 等，这些类提供了原子性的操作方法，可以实现乐观锁机制。")])]),t._v(" "),a("li",[a("p",[t._v("CAS（Compare and Swap）：CAS 是乐观锁的一种实现方式，Java 中提供了 sun.misc.Unsafe 类的 compareAndSwapXXX() 方法，可以用于实现 CAS 操作。")])]),t._v(" "),a("li",[a("p",[t._v("乐观锁框架：Java 中有一些开源的乐观锁框架，例如 JPA 的乐观锁、Spring 中的乐观锁等，这些框架封装了乐观锁的实现细节，使得开发者可以更方便地使用乐观锁机制。")])])]),t._v(" "),a("p",[t._v("需要注意的是，在使用乐观锁时需要特别关注并发冲突的处理，因为乐观锁不会阻塞其他线程，所以可能会出现多个线程同时进行修改导致冲突的情况，这时需要使用一些特殊的算法或者技术来解决。")]),t._v(" "),a("h2",{attrs:{id:"spring中的乐观锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring中的乐观锁"}},[t._v("#")]),t._v(" Spring中的乐观锁")]),t._v(" "),a("p",[t._v("Spring 中提供了两种乐观锁实现方式：")]),t._v(" "),a("ul",[a("li",[t._v("基于版本号（Version）的乐观锁：该实现方式是通过为每条记录增加一个版本号字段，在更新记录时比较版本号是否一致来判断是否发生了并发冲突。在 Spring 中，可以通过 @Version 注解来指定版本号字段，同时在执行更新操作时，Spring 会自动检查版本号并进行并发冲突检测和处理。")]),t._v(" "),a("li",[t._v("基于时间戳（Timestamp）的乐观锁：该实现方式是通过为每条记录增加一个时间戳字段，在更新记录时比较时间戳是否一致来判断是否发生了并发冲突。在 Spring 中，可以通过 @Timestamp 注解来指定时间戳字段，同时在执行更新操作时，Spring 会自动检查时间戳并进行并发冲突检测和处理。")])]),t._v(" "),a("p",[t._v("需要注意的是，在使用 Spring 的乐观锁机制时，"),a("strong",[t._v("需要确保数据库中支持乐观锁实现所需要的版本号或时间戳字段")]),t._v("，同时需要特别关注并发冲突的处理，确保在并发访问时不会发生数据不一致的情况。")]),t._v(" "),a("h2",{attrs:{id:"mysql支持版本号和时间戳字段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql支持版本号和时间戳字段"}},[t._v("#")]),t._v(" MySQL支持版本号和时间戳字段")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("基于版本号的乐观锁：在 MySQL 中，可以使用 INT 或 BIGINT 类型的字段作为版本号字段，并在更新记录时，使用 WHERE 子句限制版本号相同的记录才能被更新，从而实现乐观锁控制。")]),t._v(" "),a("p",[t._v("例如，创建一个包含版本号的表：")])])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bigint")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AUTO_INCREMENT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("version"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENGINE")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("InnoDB")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHARSET")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("utf8mb4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("在更新记录时，使用类似以下的 SQL 语句进行版本号的比较和更新：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#{age}, `version` = `version` + 1 WHERE `id` = #{id} AND `version` = #{version};")]),t._v("\n")])])]),a("p",[t._v("其中，#{id} 和 #{version} 分别表示需要更新的记录的 ID 和版本号，#{age} 表示需要更新的年龄值。")]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("基于时间戳的乐观锁：在 MySQL 中，可以使用 TIMESTAMP 或 DATETIME 类型的字段作为时间戳字段，并在更新记录时，使用 WHERE 子句限制时间戳相同的记录才能被更新，从而实现乐观锁控制。")])]),t._v(" "),a("p",[t._v("例如，创建一个包含时间戳的表：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bigint")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AUTO_INCREMENT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("update_time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("timestamp")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CURRENT_TIMESTAMP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CURRENT_TIMESTAMP")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENGINE")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("InnoDB")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHARSET")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("utf8mb4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("在更新记录时，使用类似以下的 SQL 语句进行时间戳的比较和更新：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#{age}, `update_time` = #{updateTime} WHERE `id` = #{id} AND `update_time` = #{updateTime};")]),t._v("\n")])])]),a("p",[t._v("其中，#{id} 和 #{updateTime} 分别表示需要更新的记录的 ID 和时间戳，#{age} 表示需要更新的年龄值。")]),t._v(" "),a("h2",{attrs:{id:"spring-version-案例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-version-案例"}},[t._v("#")]),t._v(" Spring @Version 案例")]),t._v(" "),a("p",[t._v("@Version 注解可以用于指定实体类中的版本号字段，以便在更新操作时进行乐观锁控制。下面是一个简单的示例：")]),t._v(" "),a("p",[t._v("假设我们有一个 User 实体类，其中包含了一个 version 字段表示版本号，可以使用 @Version 注解来标识：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Entity")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Table")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"user"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Id")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@GeneratedValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("strategy "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GenerationType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("IDENTITY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),t._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Column")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Column")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"age"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Version")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Column")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"version"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" version"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// getter and setter methods")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("在进行更新操作时，可以通过调用 Spring Data JPA 提供的 save() 方法来实现乐观锁控制。例如：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Service")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserService")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Autowired")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserRepository")]),t._v(" userRepository"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),t._v(" user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        userRepository"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("save")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("当调用 update() 方法更新 User 实体时，Spring Data JPA 会自动检查 version 字段的值是否与数据库中的一致，如果一致则执行更新操作，否则抛出 OptimisticLockException 异常。例如：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),t._v(" user "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" userRepository"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("findById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1L")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("orElseThrow")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nuser"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setAge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nuserService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("在上述代码中，首先通过 UserRepository 查询到 ID 为 1 的 User 实体，并将其年龄修改为 30。接着，调用 UserService 的 update() 方法进行更新操作，此时 Spring Data JPA 会检查 user 实体的 version 字段是否与数据库中的一致，如果一致则执行更新操作，否则抛出 OptimisticLockException 异常。")]),t._v(" "),a("h2",{attrs:{id:"aqs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aqs"}},[t._v("#")]),t._v(" AQS")]),t._v(" "),a("p",[t._v("AQS（AbstractQueuedSynchronizer）是 Java 并发包中锁和同步器的核心实现，它通过一个双向队列和一个整形状态值来管理同步状态，并提供了 acquire 和 release 两个主要的同步操作。")]),t._v(" "),a("p",[t._v("AQS 内部维护了一个类似于双向链表的队列，队列中的节点表示正在等待获取锁的线程。当一个线程尝试获取锁时，如果锁已经被其他线程占用，则该线程会被加入到队列的末尾，并被阻塞。当锁的占用者释放锁时，AQS 会将队列头部的线程唤醒，并让其尝试获取锁。")]),t._v(" "),a("p",[t._v("AQS 内部的状态值可以用来表示锁的占用状态，同时也可以被子类用来表示自定义的同步状态。在使用 AQS 实现同步器时，一般需要继承 AQS 类，并通过实现 tryAcquire、tryRelease 等方法来实现同步器的加锁和释放锁操作，同时需要根据具体需求覆盖 AQS 中的一些方法来实现自定义的同步策略。")]),t._v(" "),a("p",[t._v("AQS 内部的核心方法有以下几个：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("acquire(int arg): 尝试获取锁，如果获取失败则阻塞等待。")])]),t._v(" "),a("li",[a("p",[t._v("release(int arg): 释放锁，并唤醒等待队列中的一个线程。")])]),t._v(" "),a("li",[a("p",[t._v("tryAcquire(int arg): 尝试获取锁，返回 true 表示获取成功，返回 false 表示获取失败。")])]),t._v(" "),a("li",[a("p",[t._v("tryRelease(int arg): 尝试释放锁，返回 true 表示释放成功，返回 false 表示释放失败。")])]),t._v(" "),a("li",[a("p",[t._v("tryAcquireShared(int arg): 尝试获取共享锁，返回值的含义与 tryAcquire 相同。")])]),t._v(" "),a("li",[a("p",[t._v("tryReleaseShared(int arg): 尝试释放共享锁，返回值的含义与 tryRelease 相同。")])])]),t._v(" "),a("p",[t._v("AQS 是 Java 并发包中锁和同步器的核心实现，使用 AQS 实现同步器时需要对 AQS 的原理和机制有一定的了解，才能保证实现的正确性和高效性。同时，使用 AQS 实现同步器需要谨慎，否则容易出现死锁等问题。")]),t._v(" "),a("h2",{attrs:{id:"aqs实现reentrantlock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aqs实现reentrantlock"}},[t._v("#")]),t._v(" AQS实现Reentrantlock")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("concurrent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("locks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AbstractQueuedSynchronizer")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReentrantLock")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AbstractQueuedSynchronizer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" ownerThread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" lockCount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReentrantLock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        ownerThread "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        lockCount "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tryAcquire")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" currentThread "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareAndSetState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                ownerThread "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" currentThread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                lockCount"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentThread "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" ownerThread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            lockCount"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tryRelease")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" currentThread "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentThread "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" ownerThread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IllegalMonitorStateException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Not owner thread"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" free "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            free "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            ownerThread "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("free"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("release")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("acquire")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("release")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("在上面的示例代码中，我们自定义了一个 ReentrantLock 类，继承了 AbstractQueuedSynchronizer 类。")]),t._v(" "),a("p",[t._v("这个类是 AQS 提供的基类，我们可以通过继承这个类来实现自定义的同步器。")]),t._v(" "),a("p",[t._v("在这个类中，我们定义了 ownerThread 和 lockCount 两个变量来记录当前线程和当前线程获取锁的次数。我们重写了 tryAcquire 和 tryRelease 方法来实现获取锁和释放锁的逻辑。")]),t._v(" "),a("p",[t._v("在 tryAcquire 方法中，首先判断当前线程是否已经获取了锁，如果已经获取了锁则直接增加 lockCount。否则，我们尝试使用 compareAndSetState 方法来更新状态值。如果更新成功，则将当前线程记录为 ownerThread，同时将 lockCount 设置为 1。")]),t._v(" "),a("p",[t._v("在 tryRelease 方法中，首先判断当前线程是否为 ownerThread，如果不是则抛出异常。然后根据传入的参数来计算新的状态值，如果状态值为 0，则将 ownerThread 设置为 null，表示当前线程已经释放了锁。最后，我们调用 release 方法来释放同步状态。")]),t._v(" "),a("p",[t._v("我们还定义了 lock 和 unlock 方法，分别用于获取锁和释放锁。在这些方法中，我们直接调用 acquire 和 release 方法来实现获取锁和释放锁的逻辑。acquire 和 release 在 AQS 中就会去调用 tryAcquire 和 tryRelease，从而执行我们重写的逻辑。")]),t._v(" "),a("h2",{attrs:{id:"理解aqs中的acquire方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#理解aqs中的acquire方法"}},[t._v("#")]),t._v(" 理解AQS中的acquire方法")]),t._v(" "),a("p",[a("code",[t._v("acquire()")]),t._v(" 是 AQS 中的方法之一，用于获取锁，其内部实现包括以下几个步骤：")]),t._v(" "),a("ol",[a("li",[t._v("调用 "),a("code",[t._v("tryAcquire()")]),t._v(" 方法尝试获取锁，如果成功，则直接返回。")]),t._v(" "),a("li",[t._v("如果 "),a("code",[t._v("tryAcquire()")]),t._v(" 方法返回失败，将当前线程包装成节点（"),a("code",[t._v("Node")]),t._v("）并加入到等待队列中（即 "),a("code",[t._v("waiters")]),t._v(" 队列），并将该线程阻塞。")]),t._v(" "),a("li",[t._v("当锁被释放时，会调用 "),a("code",[t._v("release()")]),t._v(" 方法释放锁，该方法会唤醒等待队列中的第一个线程（即队头节点），并将其从队列中移除。")])]),t._v(" "),a("p",[t._v("通过上述步骤，"),a("code",[t._v("acquire()")]),t._v(" 方法可以实现获取锁的操作，同时能够保证多线程下的安全性。")]),t._v(" "),a("p",[t._v("这段代码是 AQS 中 acquire(int arg) 方法的实现：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("acquire")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tryAcquire")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("acquireQueued")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addWaiter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("EXCLUSIVE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("selfInterrupt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ol",[a("li",[t._v("第一行代码中的 "),a("code",[t._v("tryAcquire(arg)")]),t._v(" 是尝试获取锁，如果返回成功，则直接返回，这是一个快速路径，可以避免创建节点和加入等待队列等操作，提高了性能。")]),t._v(" "),a("li",[t._v("如果快速路径失败，就需要进入到慢速路径。其中，"),a("code",[t._v("addWaiter(Node.EXCLUSIVE)")]),t._v(" 将当前线程封装成节点并添加到等待队列的尾部，同时返回该节点。")]),t._v(" "),a("li",[a("code",[t._v("acquireQueued(Node node, int arg)")]),t._v(" 是尝试获取锁的核心方法，它会让当前线程进入等待队列并等待锁的释放，直到它成功获取锁为止。当获取锁失败时，该方法会将线程挂起并等待锁的释放，同时处理多线程之间的竞争关系。该方法返回一个布尔值，表示当前线程是否需要被阻塞。")]),t._v(" "),a("li",[t._v("当 "),a("code",[t._v("acquireQueued()")]),t._v(" 方法返回 "),a("code",[t._v("true")]),t._v(" 时，说明当前线程已经被阻塞，需要被唤醒，同时需要调用 "),a("code",[t._v("selfInterrupt()")]),t._v(" 方法自我中断，保证在被唤醒后能够及时处理中断。")])]),t._v(" "),a("h2",{attrs:{id:"什么是中断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是中断"}},[t._v("#")]),t._v(" 什么是中断")]),t._v(" "),a("p",[t._v("中断（interrupt）是指一个线程请求中止另一个正在运行的线程的执行。当一个线程请求中止另一个线程时，通常会将一个信号发送给目标线程，让其停止正在执行的任务并进行清理工作。")]),t._v(" "),a("p",[t._v("Java中的中断机制是一种协作式机制，即线程需要配合才能实现中断。当一个线程调用另一个线程的 "),a("code",[t._v("interrupt()")]),t._v(" 方法时，目标线程会收到一个中断请求，并设置一个中断状态，通知目标线程中断请求的发生。目标线程可以通过检查自身的中断状态来响应中断请求，通常的做法是在适当的时候抛出 "),a("code",[t._v("InterruptedException")]),t._v(" 异常，并在异常处理中进行清理工作。")]),t._v(" "),a("p",[t._v("需要注意的是，中断机制并不能强制终止一个线程的执行。线程可以在任何时刻检查自身的中断状态，并自行决定是否响应中断请求。另外，如果线程没有执行可中断的操作，例如忙等待或者死循环，那么中断请求是无法起作用的，线程仍然会一直执行下去。因此，在编写多线程程序时，需要注意避免使用忙等待和死循环等操作，以便能够及时响应中断请求。")]),t._v(" "),a("h2",{attrs:{id:"自我中断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自我中断"}},[t._v("#")]),t._v(" 自我中断")]),t._v(" "),a("p",[t._v("自我中断指的是线程在等待锁的过程中，被中断的情况。在 Java 中，可以使用 "),a("code",[t._v("Thread.interrupt()")]),t._v(" 方法对一个线程进行中断操作，这时线程就会被设置为中断状态，然后由线程自己决定如何处理中断。")]),t._v(" "),a("p",[t._v("在 AQS 中，如果一个线程在等待锁的过程中被中断，就会触发自我中断操作。这时，AQS 会在等待队列中找到该线程对应的节点，并将其标记为已中断，然后在下一次调用 "),a("code",[t._v("acquire()")]),t._v(" 方法时，会抛出 "),a("code",[t._v("InterruptedException")]),t._v(" 异常。这样，线程就可以在等待锁的过程中响应中断，避免因长时间等待锁而导致线程无法退出的问题。")]),t._v(" "),a("p",[t._v("在 AQS 中，自我中断通常与阻塞式同步器（例如 "),a("code",[t._v("ReentrantLock")]),t._v("）配合使用，可以有效提高多线程程序的响应能力。")])])}),[],!1,null,null,null);a.default=e.exports}}]);