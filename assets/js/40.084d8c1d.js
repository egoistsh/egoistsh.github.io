(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{364:function(o,r,v){"use strict";v.r(r);var l=v(7),n=Object(l.a)({},(function(){var o=this,r=o._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":o.$parent.slotKey}},[r("h2",{attrs:{id:"mysql-中的日志分类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mysql-中的日志分类"}},[o._v("#")]),o._v(" MySQL 中的日志分类")]),o._v(" "),r("p",[o._v("MySQL 中的日志分为两类：MySQL Server 的日志和存储引擎的日志。")]),o._v(" "),r("p",[o._v("MySQL里经常说到的WAL技术，WAL的全称是WriteAhead Logging，它的关键点就是"),r("strong",[o._v("先写日志，再写磁盘")]),o._v("。")]),o._v(" "),r("p",[o._v("MySQL整体来看，其实有两块：一块是Server层，它主要做的是MySQL功能层面的事情；还有一块是引擎层，负责存储相关的具体事宜。redo log是 InnoDB引擎特有的日志，而Server层也有自己的日志，称为binlog（归档日志）。")]),o._v(" "),r("p",[o._v("最开始MySQL里并没有InnoDB引擎。MySQL自带的引擎是MyISAM，但是MyISAM没有 crash-safe的能力，binlog日志只能用于归档。而InnoDB是另一个公司以插件形式引入MySQL的，既然只依靠binlog是没有crash-safe能力的，所以InnoDB使用另外一套日志系统，也就是 redo log来实现crash-safe能力。")]),o._v(" "),r("p",[o._v("有了redo log，InnoDB就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个 能力称为crash-safe。")]),o._v(" "),r("h3",{attrs:{id:"mysql-server-的日志包括"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mysql-server-的日志包括"}},[o._v("#")]),o._v(" MySQL Server 的日志包括：")]),o._v(" "),r("ol",[r("li",[o._v("慢查询日志（slow query log）：记录执行时间超过阈值的 SQL 语句。")]),o._v(" "),r("li",[o._v("错误日志（error log）：记录 MySQL Server 在运行过程中出现的错误信息。")]),o._v(" "),r("li",[o._v("通用查询日志（general query log）：记录所有连接到 MySQL Server 上的 SQL 语句。")]),o._v(" "),r("li",[r("strong",[o._v("二进制日志（binary log/bin log")]),o._v("）：记录对数据库的所有更新"),r("strong",[o._v("操作")]),o._v("，包括 INSERT、UPDATE 和 DELETE 等语句，记录的是SQL语句或者语句的结果。binlog 用于数据备份、恢复和复制。")]),o._v(" "),r("li",[o._v("中继日志（relay log）：在 MySQL 主从复制架构中，记录从库接收到的二进制日志，以便同步主库的数据。")])]),o._v(" "),r("h3",{attrs:{id:"存储引擎的日志包括"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#存储引擎的日志包括"}},[o._v("#")]),o._v(" 存储引擎的日志包括：")]),o._v(" "),r("ol",[r("li",[o._v("事务日志（transaction log）：InnoDB 存储引擎的事务日志，用于实现事务的原子性和持久性。")]),o._v(" "),r("li",[o._v("回滚日志（rollback log/undo log）：用于实现事务的回滚操作，同时也是 InnoDB 存储引擎的恢复机制的一部分。用于记录事务执行前的数据，以便在事务回滚时恢复数据的原始状态。在事务提交后，undo log 中的数据可以被删除或重用。")]),o._v(" "),r("li",[o._v("重做日志（redo log）：用于保证数据库在崩溃后的数据一致性和完整性，同时也是 InnoDB 存储引擎的恢复机制的一部分。用于记录事务执行的所有修改操作，包括 INSERT、UPDATE、DELETE 等。在事务提交前，redo log 记录了修改的"),r("strong",[o._v("物理信息")]),o._v("，保证事务能够被恢复。")])]),o._v(" "),r("h2",{attrs:{id:"为什么只使用bin-log无法实现崩溃恢复"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#为什么只使用bin-log无法实现崩溃恢复"}},[o._v("#")]),o._v(" 为什么只使用bin log无法实现崩溃恢复")]),o._v(" "),r("p",[o._v("Binlog 只记录了数据库的修改操作，而没有记录对应的数据快照，因此在恢复数据时需要先恢复最近的一次数据快照，再依次执行 Binlog 中的修改操作。")]),o._v(" "),r("p",[o._v("Binlog 只记录了已经提交的事务，而没有记录未提交的事务，如果 MySQL 实例在执行未提交的事务时崩溃，那么这些事务中所做的修改就无法通过 Binlog 进行恢复。")]),o._v(" "),r("p",[o._v("因此，在 MySQL 中，实现崩溃恢复功能需要同时使用 Binlog 和 InnoDB 的 redo log，其中 InnoDB 的 redo log 记录了数据库引擎所做的修改操作，包括已经提交的和未提交的事务，可以用于在 MySQL 异常崩溃后快速恢复到上一个稳定状态。")]),o._v(" "),r("h2",{attrs:{id:"redo-log和bin-log的对比"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redo-log和bin-log的对比"}},[o._v("#")]),o._v(" redo log和bin log的对比")]),o._v(" "),r("p",[o._v("两种日志有以下三点不同：")]),o._v(" "),r("ol",[r("li",[o._v("redo log是InnoDB引擎特有的；binlog是MySQL的Server层实现的，所有引擎都可以使用。")]),o._v(" "),r("li",[o._v("redo log是物理日志，记录的是“在某个数据页上做了什么修改”；binlog是逻辑日志，记录的是这个语句的原始逻辑，比如“给ID=2这一行的c字段加1 ”。 （所以bin log 才无法实现crash-safe）")]),o._v(" "),r("li",[o._v("redo log是循环写的，空间固定会用完；binlog是可以追加写入的。“追加写”是指binlog文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。")])]),o._v(" "),r("h2",{attrs:{id:"redo-log流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redo-log流程"}},[o._v("#")]),o._v(" redo log流程")]),o._v(" "),r("p",[o._v('redo log的写入拆成了两个步骤：prepare和commit，是"两阶段提交"。')]),o._v(" "),r("p",[o._v("第一阶段：预提交（Prepare）")]),o._v(" "),r("p",[o._v("当一个事务提交时，InnoDB 存储引擎首先会将事务所做的修改操作记录到 redo log 中，这个过程称为预提交（Prepare）。在预提交阶段，InnoDB 将修改操作写入 redo log 缓冲区，但不会将修改操作写入磁盘，因此预提交是一个快速的操作。")]),o._v(" "),r("p",[o._v("第二阶段：正式提交（Commit）")]),o._v(" "),r("p",[o._v("当预提交完成后，InnoDB 存储引擎会等待 MySQL 主线程发出提交指令。在接收到提交指令后，InnoDB 会将 redo log 缓冲区中的修改操作写入磁盘，这个过程称为正式提交（Commit）。正式提交阶段是一个相对慢速的操作，因为需要将修改操作写入磁盘，确保数据的持久性。")]),o._v(" "),r("p",[o._v("在两阶段提交的过程中，如果预提交成功但在正式提交前发生了故障，比如 MySQL 服务器崩溃或者断电等，那么 InnoDB 存储引擎在启动时会检查 redo log 中未提交的事务，并将这些未提交的事务进行回滚，以保证数据的一致性。因此，在 InnoDB 存储引擎中，redo log 的两阶段提交保证了事务的原子性和持久性。")]),o._v(" "),r("br"),o._v(" "),r("p",[o._v("当一个事务提交时，InnoDB 首先将修改操作写入 redo log 中，然后再将这个事务的提交操作记录到 Binlog 中。")]),o._v(" "),r("h2",{attrs:{id:"q-a"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#q-a"}},[o._v("#")]),o._v(" Q & A")]),o._v(" "),r("p",[o._v("Q：定期全量备份的周期“取决于系统重要性，有的是一天一备，有的是一周一备”。那么在什么场景下，一天一备会比一周一备更有优势呢？或者说，它影响了这个数据库系统的哪个指标？")]),o._v(" "),r("p",[o._v("A：一天一备，那么如果需要恢复数据的话，只要保证当天的binlog完整即可；一周一备的话就要保证一周的binlog完整；同时频繁全量备份需要更多存储空间，如何选择取决于业务的重要性，对应的指标是"),r("strong",[o._v("RTO")]),o._v("(目标恢复时间)。")])])}),[],!1,null,null,null);r.default=n.exports}}]);