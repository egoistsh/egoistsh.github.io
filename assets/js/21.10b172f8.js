(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{345:function(t,s,v){"use strict";v.r(s);var n=v(7),a=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[s("img",{attrs:{src:"https://p.ipic.vip/fhgwnr.png",alt:"img"}})]),t._v(" "),s("p",[t._v("一般的字节码增强技术，如ASM，Javassist 只能在类加载前对类进行强化。而配合JVM提供的 Instrument 类，可以实现对运行时的类进行修改和重载。")]),t._v(" "),s("p",[t._v("应用场景：")]),t._v(" "),s("ul",[s("li",[t._v("热部署：不部署服务而对线上服务做修改，可以做打点、增加日志等操作。")]),t._v(" "),s("li",[t._v("Mock：测试时候对某些服务做Mock。")]),t._v(" "),s("li",[t._v("性能诊断工具：比如bTrace就是利用Instrument，实现无侵入地跟踪一个正在运行的JVM，监控到类和方法级别的状态信息。")])]),t._v(" "),s("p",[t._v("字节码增强技术相当于是一把打开运行时JVM的钥匙，利用它可以动态地对运行中的程序做修改，也可以跟踪JVM运行中程序的状态。此外，我们平时使用的动态代理、AOP也与字节码增强密切相关，它们实质上还是利用各种手段生成符合规范的字节码文件。掌握字节码增强后可以高效地定位并快速修复一些棘手的问题（如线上性能问题、方法出现不可控的出入参需要紧急加日志等问题），也可以在开发中减少冗余代码，大大提高开发效率。")]),t._v(" "),s("p",[t._v("参考：")]),t._v(" "),s("ul",[s("li",[t._v("https://www.pdai.tech/md/java/jvm/java-jvm-class-enhancer.html#%E8%BF%90%E8%A1%8C%E6%97%B6%E7%B1%BB%E7%9A%84%E9%87%8D%E8%BD%BD")])])])}),[],!1,null,null,null);s.default=a.exports}}]);