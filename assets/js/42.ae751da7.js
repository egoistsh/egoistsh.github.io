(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{366:function(t,v,_){"use strict";_.r(v);var s=_(7),r=Object(s.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("p",[t._v("数据库三范式是关系型数据库设计中的基本原则，用于规范数据库中的数据结构，避免数据冗余和数据不一致性。")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("第一范式（1NF）：要求关系中的"),v("strong",[t._v("每个属性具有原子性")]),t._v("，即不可再分解。例如，一个顾客信息表中的电话号码字段应该是原子的，而不能把电话号码分成区号、电话号码、分机号等多个字段。")])]),t._v(" "),v("li",[v("p",[t._v("第二范式（2NF）：要求关系中的"),v("strong",[t._v("每个非主键属性都完全依赖于主键")]),t._v("。也就是说，如果一个关系中有多个主键，则每个非主键属性都应该和这些主键相关，而不能只和其中一部分主键相关。")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("例如：假设有一个学生课程表（StudentCourses）关系，其中包括学生ID、课程ID、课程名称、教师ID和教师姓名等字段。其中，学生ID和课程ID组成联合主键，教师ID和教师姓名与课程ID相关。")]),t._v(" "),v("p",[t._v("此时，课程名称和教师姓名两个字段都不完全依赖于主键，因为它们只和课程ID相关，而不和学生ID相关。为了满足第二范式，应该将教师姓名从StudentCourses关系中拆分出来，建立一个新的教师表（Teachers），将教师ID、教师姓名等字段放入其中。这样，每个非主键属性都完全依赖于主键，不会出现数据冗余和数据不一致性的问题。")])])])]),t._v(" "),v("li",[v("p",[t._v("第三范式（3NF）：要求关系中的"),v("strong",[t._v("每个非主键属性都不传递依赖于主键")]),t._v("。也就是说，如果一个非主键属性依赖于另一个非主键属性，那么它应该被拆分成单独的关系，以避免数据冗余和不一致性。")]),t._v(" "),v("ul",[v("li",[t._v("例如：假设有一个订单关系（Orders），其中包括订单号、客户ID、客户姓名、客户地址等字段。此时，客户姓名和客户地址两个字段之间存在传递依赖，因为它们都和客户ID相关。为了满足第三范式，应该将客户姓名和客户地址两个字段从订单关系中拆分出来，建立一个新的客户表（Customers），将客户ID、客户姓名、客户地址等字段放入其中。这样，每个非主键属性都不传递依赖于主键，可以避免数据冗余和不一致性的问题。")])])])]),t._v(" "),v("p",[t._v("三范式的实际应用可以提高数据库的数据存储效率、减少冗余数据，从而避免数据不一致的情况出现。但是，在实际的数据库设计过程中，有时候严格遵循三范式并不一定是最优的选择，需要根据具体情况进行权衡和取舍。例如，在某些查询频繁的场景下，可能需要采用反范式设计来提高查询性能。")]),t._v(" "),v("h2",{attrs:{id:"例子说明第二范式和第三范式的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#例子说明第二范式和第三范式的区别"}},[t._v("#")]),t._v(" 例子说明第二范式和第三范式的区别")]),t._v(" "),v("p",[t._v("假设有一个订单表（Order）包括以下字段：订单号、客户号、客户名称、客户地址、商品号、商品名称、商品单价、商品数量、订单总价。其中，订单号为主键。")]),t._v(" "),v("h3",{attrs:{id:"第二范式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第二范式"}},[t._v("#")]),t._v(" 第二范式")]),t._v(" "),v("p",[t._v("如果我们将商品名称和商品单价两个字段放在订单表中，那么会出现以下问题：")]),t._v(" "),v("p",[t._v("数据冗余：如果一种商品被多个订单使用，那么它的名称和单价就会在订单表中重复出现。\n数据不一致：如果修改了一种商品的名称或单价，那么所有使用该商品的订单中的相应字段都需要修改。\n为了避免这些问题，我们可以将商品名称和商品单价从订单表中拆分出来，建立一个新的商品表（Product），包括商品号、商品名称、商品单价等字段。这样，每个非主键属性都完全依赖于主键，可以避免数据冗余和数据不一致性的问题。")]),t._v(" "),v("h3",{attrs:{id:"第三范式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第三范式"}},[t._v("#")]),t._v(" 第三范式")]),t._v(" "),v("p",[t._v("如果我们将客户名称和客户地址两个字段放在订单表中，那么会出现以下问题：")]),t._v(" "),v("p",[t._v("数据冗余：如果一个客户在多个订单中使用，那么它的名称和地址就会在订单表中重复出现。\n数据不一致：如果修改了一个客户的名称或地址，那么所有使用该客户的订单中的相应字段都需要修改。\n为了避免这些问题，我们可以将客户名称和客户地址从订单表中拆分出来，建立一个新的客户表（Customer），包括客户号、客户名称、客户地址等字段。这样，每个非主键属性都不传递依赖于主键，可以避免数据冗余和数据不一致性的问题。")])])}),[],!1,null,null,null);v.default=r.exports}}]);