(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{329:function(r,e,t){"use strict";t.r(e);var o=t(7),v=Object(o.a)({},(function(){var r=this,e=r._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[e("h2",{attrs:{id:"override和overload"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#override和overload"}},[r._v("#")]),r._v(" override和overload")]),r._v(" "),e("ul",[e("li",[e("strong",[r._v("重载 (Overload)")]),r._v(" 表示同一个类中可以有多个名称相同的方法，但这些方法的参数列表各不相同（即参数个数、类型或顺序不同）。")]),r._v(" "),e("li",[e("strong",[r._v("重写 (Override)")]),r._v(" 表示子类中的方法可以与父类中的某个方法的名称 和参数完全相同，通过子类创建的实例对象调用这个方法时，将调用子类中的定义方法，这相当于把父类中定义的那 个完全相同的方法给覆盖了，这也是面向对象编程的多态性的一种表现。（备注：子类覆盖父类的方法时，只能比父类抛出更少的异常，或者是抛出父类抛出的异常 的子异常，因为子类可以解决父类的一些问题，不能比父类有更多的问题。子类方法的访问权限只能比父类的更大，不能更小。如果父类的方法 是 private 类型，那么，子类则不存在覆盖的限制，相当于子类中增加了一个全新的方法。）")])]),r._v(" "),e("p",[r._v("总之，重写 Overriding 是父类与子类之间多态性的一种表现，重载 Overloading 是一个类中多态性的一种表现。很重要的一点就是，Overloaded 的方法是可以改变返回值的类型。")])])}),[],!1,null,null,null);e.default=v.exports}}]);