(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{355:function(t,a,n){"use strict";n.r(a);var s=n(7),e=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[a("code",[t._v("CountDownLatch")]),t._v("是Java并发编程中的一个同步工具类，它可以让一个或多个线程等待一组操作完成后再继续执行。")]),t._v(" "),a("p",[t._v("CountDownLatch is a synchronization tool that allows one or more threads to wait until a set of operations has completed. It is initialized with a count, and each time the "),a("code",[t._v("countDown()")]),t._v(" method is called, the count is decremented. When the count reaches zero, all threads that are waiting on the CountDownLatch are released.")]),t._v(" "),a("p",[t._v("CountDownLatch can be used to solve a variety of synchronization problems. For example, it can be used to ensure that all threads in a group have finished executing before a certain task is started, or to ensure that a certain number of resources are available before a task is started.")]),t._v(" "),a("h2",{attrs:{id:"核心方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心方法"}},[t._v("#")]),t._v(" 核心方法")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CountDownLatch")]),t._v(" latch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CountDownLatch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlatch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("countDown")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlatch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("await")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"应用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[t._v("#")]),t._v(" 应用场景：")]),t._v(" "),a("ol",[a("li",[t._v("并发任务的协同：当一个任务需要等待其他多个任务完成后才能继续执行时，可以使用 CountDownLatch 来实现线程之间的协同。任务中的线程可以调用 CountDownLatch 的 await() 方法进入等待状态，而其他任务中的线程执行完自己的操作后可以调用 CountDownLatch 的 countDown() 方法来减少计数器，当计数器减至零时，等待中的线程就会被唤醒。")]),t._v(" "),a("li",[t._v("等待资源初始化：当一个程序需要等待一些资源初始化完成后才能正常运行时，可以使用 CountDownLatch 来实现等待。主线程可以调用 await() 方法等待初始化任务完成，而初始化任务中的线程在完成初始化后调用 countDown() 方法来减少计数器，当计数器减至零时，主线程就会被唤醒，可以开始执行后续的逻辑。")]),t._v(" "),a("li",[t._v("测试多线程性能：在性能测试中，可以使用 CountDownLatch 来模拟并发场景。主线程可以启动多个工作线程，这些工作线程会执行相同的任务，并在任务完成时调用 countDown() 方法。主线程可以调用 await() 方法等待所有工作线程完成，以便统计执行时间和性能指标。")])])])}),[],!1,null,null,null);a.default=e.exports}}]);