(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{336:function(t,a,v){"use strict";v.r(a);var e=v(7),l=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("Java Memory Model，JMM")]),t._v(" "),a("p",[t._v("缓存会带来缓存一致性的问题。通常通过各种协议解决。")]),t._v(" "),a("p",[t._v("这里的主内存、工作内存与Java内存区域中的Java堆、栈、方法区等不是一个概念，没有关系。")]),t._v(" "),a("ul",[a("li",[t._v("Java内存模型规定了所有的变量都存储在主内存中。")]),t._v(" "),a("li",[t._v("每条线程还有自己的工作内存，线程中的工作内存中保存了被该线程使用的变量的主内存副本，线程对变量的所有操作（读取、赋值等）都必须在工作内存中进行，而不能直接读写主内存中的数据。")]),t._v(" "),a("li",[t._v("不同的线程之间也无法直接访问对方工作内存中的变量，线程间变量值的传递均需要通过主内存来完成。")])]),t._v(" "),a("p",[t._v("这里说的变量与java编程中的变量有所区别，它包括了"),a("strong",[t._v("实例字段、静态字段和构成数组对象的元素")]),t._v("，但是不包括局部变量与方法参数，因为是线程私有的，不会被共享，不会存在竞争问题。")]),t._v(" "),a("h2",{attrs:{id:"volatile-和-synchronized"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#volatile-和-synchronized"}},[t._v("#")]),t._v(" volatile 和 synchronized")])])}),[],!1,null,null,null);a.default=l.exports}}]);