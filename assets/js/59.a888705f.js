(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{383:function(s,t,a){"use strict";a.r(t);var e=a(7),n=Object(e.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"_1-sexnx-key-value"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-sexnx-key-value"}},[s._v("#")]),s._v(" 1. SEXNX key value")]),s._v(" "),t("p",[s._v("set if not exists")]),s._v(" "),t("p",[s._v("如果 key 存在，不执行操作。key 不存在，则将 key 设置为 value。")]),s._v(" "),t("ul",[t("li",[s._v("如果 key 不存在，则显示插入成功，可以用来表示加锁成功；")]),s._v(" "),t("li",[s._v("如果 key 存在，则会显示插入失败，可以用来表示加锁失败。")])]),s._v(" "),t("p",[s._v("解锁：删除 key。但不能乱删，要保证执行操作的客户端就是加锁的客户端。所以，要先通过 value 判断是否为加锁客户端。")]),s._v(" "),t("p",[s._v("缺点：有没过期时间，锁不会过期。可能出现客户端拿到锁后发生异常，导致锁一直无法释放。")]),s._v(" "),t("h2",{attrs:{id:"_2-set-key-value-ex-seconds-px-millseconds-nx-xx"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-set-key-value-ex-seconds-px-millseconds-nx-xx"}},[s._v("#")]),s._v(" 2. SET key value [EX seconds | PX millseconds] [NX | XX]")]),s._v(" "),t("ul",[t("li",[s._v("EX seconds – 设置键key的过期时间，单位时秒")]),s._v(" "),t("li",[s._v("PX milliseconds – 设置键key的过期时间，单位是毫秒")]),s._v(" "),t("li",[s._v("NX – 只有键key不存在的时候才会设置key的值")]),s._v(" "),t("li",[s._v("XX – 只有键key存在的时候才会设置key的值")])]),s._v(" "),t("p",[s._v("缺点：解锁时，判断是否是当前锁，再删除 key，不是原子性操作。")]),s._v(" "),t("p",[s._v("解决：用 lua 脚本")]),s._v(" "),t("div",{staticClass:"language-lua extra-class"},[t("pre",{pre:!0,attrs:{class:"language-lua"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" 释放锁时，先比较 value 是否相等，避免锁的误释放\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" redis"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"get"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("KEYS"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" ARGV"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" redis"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"del"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("KEYS"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n")])])]),t("h2",{attrs:{id:"_3-redlock-原作者"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-redlock-原作者"}},[s._v("#")]),s._v(" 3. Redlock 原作者")]),s._v(" "),t("p",[s._v("前两种方式更多是针对单节点的 redis，针对多节点的 redis，作者提出了 Redlock")]),s._v(" "),t("h2",{attrs:{id:"_4-redisson"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-redisson"}},[s._v("#")]),s._v(" 4. Redisson")]),s._v(" "),t("p",[s._v("开门狗机制")])])}),[],!1,null,null,null);t.default=n.exports}}]);