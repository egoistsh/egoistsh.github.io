(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{405:function(o,t,e){"use strict";e.r(t);var a=e(7),l=Object(a.a)({},(function(){var o=this,t=o._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":o.$parent.slotKey}},[t("h2",{attrs:{id:"接入google-oauth2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#接入google-oauth2"}},[o._v("#")]),o._v(" 接入Google OAuth2")]),o._v(" "),t("p",[o._v("在前后端分离的架构中，通常建议将 OAuth2.0 授权流程的前半部分（即用户授权）放在前端，将后半部分（即获取访问令牌和用户信息）放在后端。这样可以实现更好的安全性和可维护性。")]),o._v(" "),t("p",[o._v("具体来说，你可以在前端中使用 Google 提供的 JavaScript API，在用户点击登录按钮时弹出 Google 的授权页面，让用户授权你的应用访问其 Google 账号。授权成功后，Google 将会重定向到你事先指定的回调 URL（通常是后端提供的一个 URL），并带上一个授权代码。")]),o._v(" "),t("p",[o._v("在后端中，你可以使用 OAuth2.0 库（例如 Passport 或 Grant）来处理 Google 的授权代码，以获取访问令牌和用户信息。然后，你可以将用户信息存储在数据库中，或使用 JWT 生成一个加密的访问令牌，将其返回给前端。前端可以将这个访问令牌存储在本地（例如 LocalStorage），并在后续的 API 请求中携带这个令牌，以证明用户的身份。")]),o._v(" "),t("p",[o._v("需要注意的是，OAuth2.0 授权流程涉及到敏感信息（例如 Google 账号的访问令牌和用户信息），因此必须采取一定的安全措施，以防止信息泄露和攻击。例如，你可以使用 HTTPS 来加密通信，使用 CORS 来限制跨域访问，使用 CSRF token 来防止 CSRF 攻击等。")]),o._v(" "),t("br"),o._v(" "),t("p",[o._v("code：https://github.com/0xMALVEE/mern-login-system-2022")])])}),[],!1,null,null,null);t.default=l.exports}}]);