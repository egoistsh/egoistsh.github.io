(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{330:function(v,t,_){"use strict";_.r(t);var a=_(7),l=Object(a.a)({},(function(){var v=this,t=v._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h2",{attrs:{id:"相同点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#相同点"}},[v._v("#")]),v._v(" 相同点：")]),v._v(" "),t("ul",[t("li",[v._v("都不能被实例化。")]),v._v(" "),t("li",[v._v("接口的实现类或抽象类的子类都只有实现了接口或抽象类中的方法后才能实例化。")])]),v._v(" "),t("h2",{attrs:{id:"不同点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#不同点"}},[v._v("#")]),v._v(" 不同点：")]),v._v(" "),t("ul",[t("li",[v._v("接口强调特定功能的实现，抽象类强调所属关系。")]),v._v(" "),t("li",[v._v("接口的设计目的是对类的行为进行约束（一种“有”的约束）。抽象类的设计目的是代码复用。")]),v._v(" "),t("li",[v._v("接口只能有定义，不能有方法的实现，Java1.8开始可以定义default方法。抽象类可以有定义和实现。")]),v._v(" "),t("li",[v._v("接口成员变量默认为public static final，必须赋初值，不能被修改，成员方法都是public、abstract的。抽象类中的成员变量默认default，可在子类中被重新定义，重新赋值，抽象方法被abstract修饰，也可以有普通方法。")]),v._v(" "),t("li",[v._v("一个类可以实现多个接口，但只能继承一个抽象类。")])]),v._v(" "),t("p",[v._v("一些理解：")]),v._v(" "),t("p",[v._v("抽象类就是接口和普通类之间的过渡，抽象类初衷是代码复用，是因为他就是个类，但是用抽象方法这个东西也可以对子类进行一定程度上的约束，所以抽象类比较适合既有约束，又需要代码复用的场景。")]),v._v(" "),t("p",[v._v("类通过继承实现抽象层次和具体实现的复用，但这样层次混乱，于是过渡到了抽象类，再演变为接口类+组合。")]),v._v(" "),t("p",[v._v("接口主要是用来抽象方法功能。当你关注事物的本质的时候，请用抽象类；当你关注一种操作的时候，用接口。")]),v._v(" "),t("p",[v._v("接口里面的方法只能声明，不能有具体的实现。这说明接口是设计的结果，抽象类是重构的结果。")]),v._v(" "),t("h2",{attrs:{id:"接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#接口"}},[v._v("#")]),v._v(" 接口")]),v._v(" "),t("ul",[t("li",[v._v("Java中接口使用interface关键字修饰")]),v._v(" "),t("li",[v._v("接口可以包含变量、方法；变量被隐式指定为public static final，方法被隐式指定为public abstract（JDK1.8之前）；（可以将接口方法标记为 "),t("code",[v._v("public")]),v._v("，将变量标记为 "),t("code",[v._v("public static final")]),v._v("。但 Java 语言规范建议不要书写这些多余的关键字。）")]),v._v(" "),t("li",[v._v("接口支持多继承，即一个接口可以extends多个接口，间接的解决了Java中类的单继承问题；")]),v._v(" "),t("li",[v._v("一个类可以实现多个接口；")]),v._v(" "),t("li",[v._v("JDK1.8中对接口增加了新的特性：\n"),t("ul",[t("li",[v._v("默认方法（default method）：JDK 1.8允许给接口添加非抽象的方法实现，但必须使用default关键字修饰；定义了default的方法可以不被实现子类所实现，但"),t("strong",[v._v("只能被实现子类的对象调用")]),v._v("；如果子类实现了多个接口，并且这些接口包含一样的默认方法，则子类必须重写默认方法；")]),v._v(" "),t("li",[v._v("静态方法（static method）：JDK 1.8中允许使用static关键字修饰一个方法，并提供实现，称为接口静态方法。接口静态方法只能通过接口调用（"),t("strong",[v._v("接口名.静态方法名")]),v._v("）。")])])]),v._v(" "),t("li",[v._v("接口比抽象类还抽象。封装了接口的实现。可以降低代码的耦合度，提高代码的可维护性和可扩展性。")])]),v._v(" "),t("h2",{attrs:{id:"抽象类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#抽象类"}},[v._v("#")]),v._v(" 抽象类")]),v._v(" "),t("ul",[t("li",[v._v("Java中被abstract关键字修饰的类称为抽象类，被abstract关键字修饰的方法称为抽象方法，抽象方法只有方法的声明，没有方法体。")]),v._v(" "),t("li",[v._v("抽象类不能被实例化只能被继承；")]),v._v(" "),t("li",[v._v("包含抽象方法的一定是抽象类，但是抽象类不一定含有抽象方法；")]),v._v(" "),t("li",[v._v("抽象类中的抽象方法的修饰符只能为public或者protected，默认为public；")]),v._v(" "),t("li",[v._v("一个子类继承一个抽象类，则子类必须实现父类抽象方法，否则子类也必须定义为抽象类；")]),v._v(" "),t("li",[v._v("抽象类可以包含属性、方法、构造方法，但是构造方法不能用于实例化，主要用途是被子类调用。")])])])}),[],!1,null,null,null);t.default=l.exports}}]);