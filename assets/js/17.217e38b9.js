(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{341:function(v,_,a){"use strict";a.r(_);var t=a(7),r=Object(t.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"java对象的创建"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java对象的创建"}},[v._v("#")]),v._v(" Java对象的创建")]),v._v(" "),_("ol",[_("li",[v._v("类加载检查")]),v._v(" "),_("li",[v._v("分配内存")]),v._v(" "),_("li",[v._v("初始化零值（为对象字段设置零值）")]),v._v(" "),_("li",[v._v("设置对象头")]),v._v(" "),_("li",[v._v("执行构造方法")])]),v._v(" "),_("h1",{attrs:{id:"java对象的内存布局"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java对象的内存布局"}},[v._v("#")]),v._v(" Java对象的内存布局")]),v._v(" "),_("p",[v._v("对象在堆中布局可以分为三个部分：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("对象头")])]),v._v(" "),_("li",[_("ul",[_("li",[v._v("存储对象自身的运行时数据（Mark Word）：哈希码、GC分代年龄、锁状态标志、线程持有的锁、偏向锁ID等")]),v._v(" "),_("li",[v._v("类型指针：对象指向它的类元数据的指针，表示是哪个类的实例。")])])]),v._v(" "),_("li",[_("p",[v._v("实例数据")])]),v._v(" "),_("li",[_("p",[v._v("填充对齐")])])]),v._v(" "),_("h1",{attrs:{id:"java对象的访问定位"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java对象的访问定位"}},[v._v("#")]),v._v(" Java对象的访问定位")]),v._v(" "),_("p",[v._v("通过虚拟机栈上的reference数据来操作堆上的具体对象。")]),v._v(" "),_("p",[v._v("对象的访问方式由虚拟机的实现决定：主流的访问方式主要有"),_("strong",[v._v("使用句柄")]),v._v("和"),_("strong",[v._v("直接指针")]),v._v("两种。")]),v._v(" "),_("p",[v._v("句柄： 如果使用句柄的话，那么Java堆中将会划分出一块内存来作为句柄池，reference 中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自的具体地址信息；")]),v._v(" "),_("p",[v._v("直接指针： 如果使用直接指针访问，那么 Java 堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，而reference 中存储的直接就是对象的地址。"),_("strong",[v._v("hotspot的使用方式")])]),v._v(" "),_("p",[v._v("这两种对象访问方式各有优势。使用句柄来访问的最大好处是 reference 中存储的是稳定的句柄地址，在对象被移动时只会改变句柄中的实例数据指针，而 reference 本身不需要修改。使用直接指针访问方式最大的好处就是速度快，减少了一次间接寻址。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://p.ipic.vip/vx85k0.png",alt:"img"}})]),v._v(" "),_("p",[_("img",{attrs:{src:"https://p.ipic.vip/ybkv3z.png",alt:"img"}})]),v._v(" "),_("h1",{attrs:{id:"常量池问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#常量池问题"}},[v._v("#")]),v._v(" 常量池问题")]),v._v(" "),_("p",[v._v("直接使用双引号声明出来的"),_("code",[v._v("String")]),v._v("对象会直接存储在常量池中。")]),v._v(" "),_("p",[v._v("对于基本数据类型来说，比较的是值。对于引用数据类型来说，比较的是对象的内存地址。")]),v._v(" "),_("p",[v._v("Java 基本类型的包装类的大部分都实现了常量池技术。")]),v._v(" "),_("p",[v._v("Byte,Short,Integer,Long 这 4 种包装类默认创建了数值 "),_("strong",[v._v("[-128，127]")]),v._v(" 的相应类型的缓存数据，Character 创建了数值在 "),_("strong",[v._v("[0,127]")]),v._v(" 范围的缓存数据，Boolean 直接返回 True Or False。")]),v._v(" "),_("p",[v._v("两种浮点数类型的包装类 Float,Double 并没有实现常量池技术。")]),v._v(" "),_("p",[v._v("记住："),_("strong",[v._v("所有整型包装类对象之间值的比较，全部使用 equals 方法比较")]),v._v("。")]),v._v(" "),_("p",[v._v("在编译过程中，Javac 编译器会进行一个叫做"),_("strong",[v._v("常量折叠")]),v._v("(Constant Folding)的代码优化。常量折叠会把常量表达式的值求出来作为常量嵌在最终生成的代码中，这是 Javac 编译器会对源代码做的极少量优化措施之一(代码优化几乎都在即时编译器中进行)。")]),v._v(" "),_("p",[v._v('一般来说，我们要尽量避免通过 new 的方式创建字符串。使用双引号声明的 String 对象（ String s1 = "java" ）更利于让编译器有机会优化我们的代码，同时也更易于阅读。')]),v._v(" "),_("p",[v._v("被 Final 关键字修改之后的 String 会被编译器当做常量来处理，编译器程序编译期就可以确定它的值，其效果就想到于访问常量。")])])}),[],!1,null,null,null);_.default=r.exports}}]);