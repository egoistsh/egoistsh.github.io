<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Java并发 - 标签 - Kaze Site</title>
        <link>http://example.org/tags/java%E5%B9%B6%E5%8F%91/</link>
        <description>Java并发 - 标签 - Kaze Site</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 04 Sep 2022 21:11:30 &#43;0800</lastBuildDate><atom:link href="http://example.org/tags/java%E5%B9%B6%E5%8F%91/" rel="self" type="application/rss+xml" /><item>
    <title>如何实现 ReentrantLock？</title>
    <link>http://example.org/posts/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0-reentrantlock/</link>
    <pubDate>Sun, 04 Sep 2022 21:11:30 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/posts/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0-reentrantlock/</guid>
    <description><![CDATA[ReentrantLock 是什么？提供什么功能？ ReentrantLock 为可重入锁，指一个线程可以对临界资源重复加锁。 支持公平锁和非公平锁。 支持设置多个条件。 支持响应中断。 公平锁和非公平]]></description>
</item><item>
    <title>Future &amp; CompletableFuture</title>
    <link>http://example.org/posts/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/future-completablefuture/</link>
    <pubDate>Thu, 16 Dec 2021 16:38:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/posts/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/future-completablefuture/</guid>
    <description><![CDATA[Future Future 模式是多线程开发中非常常见的一种设计模式，它的核心思想是异步调用。 当我们需要调用一个函数方法时，如果这个函数执行的很慢，那么我们就要进行]]></description>
</item><item>
    <title>JVM锁优化</title>
    <link>http://example.org/posts/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/jvm%E9%94%81%E4%BC%98%E5%8C%96/</link>
    <pubDate>Mon, 06 Dec 2021 23:28:22 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/posts/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/jvm%E9%94%81%E4%BC%98%E5%8C%96/</guid>
    <description><![CDATA[本文主要目的是理清 Java 的偏向锁、轻量级锁、自选锁、锁消除等概念。 JDK 6，虚拟机团队锁进行了多种优化。在JVM层面实现加锁逻辑，不用依赖底层操作系]]></description>
</item></channel>
</rss>
